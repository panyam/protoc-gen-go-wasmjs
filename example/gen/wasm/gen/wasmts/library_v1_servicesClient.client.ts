// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: library/v1/library.proto
import {
			FindBooksRequest, FindBooksResponse, 
			CheckoutBookRequest, CheckoutBookResponse, 
			ReturnBookRequest, ReturnBookResponse, 
			GetUserBooksRequest, GetUserBooksResponse
} from '../../../../gen/ts/library/v1/library_pb.js';
import {
			GetUserRequest, GetUserResponse, 
			CreateUserRequest, CreateUserResponse
} from '../../../../gen/ts/library/v1/library_pb.js';

/**
 * WASM Response interface for all service calls
 */
export interface WASMResponse<T = any> {
    success: boolean;
    message: string;
    data: T;
}

/**
 * Error class for WASM-specific errors
 */
export class WasmError extends Error {
    constructor(message: string, public readonly methodPath?: string) {
        super(message);
        this.name = 'WasmError';
    }
}
/**
 * LibraryService service client interface
 */
export interface LibraryServiceMethods {
	findBooks(request: FindBooksRequest): Promise<FindBooksResponse>;
	checkoutBook(request: CheckoutBookRequest): Promise<CheckoutBookResponse>;
	returnBook(request: ReturnBookRequest): Promise<ReturnBookResponse>;
	getUserBooks(request: GetUserBooksRequest): Promise<GetUserBooksResponse>;
}
/**
 * UserService service client interface
 */
export interface UserServiceMethods {
	getUser(request: GetUserRequest): Promise<GetUserResponse>;
	createUser(request: CreateUserRequest): Promise<CreateUserResponse>;
}

/**
 * library_v1_services WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class Library_v1_servicesClient {
    private wasm: any;
    private wasmLoadPromise: Promise<void> | null = null;

    // Service-specific clients
    public readonly libraryService: LibraryServiceClientImpl;
    public readonly userService: UserServiceClientImpl;

    constructor() {
        this.libraryService = new LibraryServiceClientImpl(this);
        this.userService = new UserServiceClientImpl(this);
    }

    /**
     * Load the WASM module asynchronously
     */
    public async loadWasm(wasmPath: string = './library_v1_services.wasm'): Promise<void> {
        if (this.wasmLoadPromise) {
            return this.wasmLoadPromise;
        }

        this.wasmLoadPromise = this.loadWASMModule(wasmPath);
        return this.wasmLoadPromise;
    }

    /**
     * Check if WASM is ready for operations
     */
    public isReady(): boolean {
        return this.wasm !== null && this.wasm !== undefined;
    }

    /**
     * Wait for WASM to be ready (use during initialization)
     */
    public async waitUntilReady(): Promise<void> {
        if (!this.wasmLoadPromise) {
            throw new Error('WASM loading not started. Call loadWasm() first.');
        }
        await this.wasmLoadPromise;
    }

    /**
     * Internal method to call WASM functions with type conversion
     */
    public callMethod<TRequest, TResponse>(
        methodPath: string,
        request: TRequest
    ): Promise<TResponse> {
        this.ensureWASMLoaded();

        // Auto-detect conversion methods based on TS generator
        const toJson = this.detectToJson(request);
        const fromJson = this.detectFromJson((request as any).constructor);

        const jsonReq = toJson(request);
        const wasmMethod = this.getWasmMethod(methodPath);
        const wasmResponse = wasmMethod(JSON.stringify(jsonReq));

        if (!wasmResponse.success) {
            throw new WasmError(wasmResponse.message, methodPath);
        }

        return fromJson(wasmResponse.data);
    }

    /**
     * Load the WASM module implementation
     */
    private async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading library_v1_services WASM module...');

        // Check if WASM is already loaded (for testing environments)
        if ((window as any).library) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).library;
            return;
        }

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/static/wasm/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Verify WASM APIs are available
        if (!(window as any).library) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).library;

        console.log('library_v1_services WASM module loaded successfully');
    }

    /**
     * Ensure WASM module is loaded (synchronous version for service calls)
     */
    private ensureWASMLoaded(): void {
        if (!this.isReady()) {
            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');
        }
    }

    /**
     * Get WASM method function by path
     */
    private getWasmMethod(methodPath: string): Function {
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
    }

    /**
     * Auto-detect toJson conversion method
     */
    private detectToJson(request: any): (req: any) => any {
        return (request as any).toJson || 
               (request as any).toJSON || 
               ((r: any) => JSON.parse(JSON.stringify(r)));
    }

    /**
     * Auto-detect fromJson conversion method
     */
    private detectFromJson(constructor: any): (json: any) => any {
        return constructor.fromJson || 
               constructor.fromJSON || 
               ((j: any) => j);
    }
}
/**
 * LibraryService service client implementation
 */
class LibraryServiceClientImpl implements LibraryServiceMethods {
    constructor(private parent: Library_v1_servicesClient) {}
    async findBooks(request: FindBooksRequest): Promise<FindBooksResponse> {
        return this.parent.callMethod('libraryService.findBooks', request);
    }
    async checkoutBook(request: CheckoutBookRequest): Promise<CheckoutBookResponse> {
        return this.parent.callMethod('libraryService.checkoutBook', request);
    }
    async returnBook(request: ReturnBookRequest): Promise<ReturnBookResponse> {
        return this.parent.callMethod('libraryService.returnBook', request);
    }
    async getUserBooks(request: GetUserBooksRequest): Promise<GetUserBooksResponse> {
        return this.parent.callMethod('libraryService.getUserBooks', request);
    }
}
/**
 * UserService service client implementation
 */
class UserServiceClientImpl implements UserServiceMethods {
    constructor(private parent: Library_v1_servicesClient) {}
    async getUser(request: GetUserRequest): Promise<GetUserResponse> {
        return this.parent.callMethod('userService.getUser', request);
    }
    async createUser(request: CreateUserRequest): Promise<CreateUserResponse> {
        return this.parent.callMethod('userService.createUser', request);
    }
}

// Export the main client class
export default Library_v1_servicesClient;