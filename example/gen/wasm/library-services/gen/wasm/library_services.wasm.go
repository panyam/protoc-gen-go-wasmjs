//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: library/v1/library.proto

package library_services

import (
	"context"
	"encoding/json"
	"fmt"
	"syscall/js"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	libraryv1 "github.com/panyam/protoc-gen-go-wasmjs/example/gen/go/library/v1"
)

// Library_servicesServicesExports provides WASM exports for dependency injection
type Library_servicesServicesExports struct {
	LibraryService libraryv1.LibraryServiceServer
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *Library_servicesServicesExports) RegisterAPI() {
	fmt.Println("library_services WASM module loading...")
	// Create namespaced API structure
	libraryModule := map[string]interface{}{
		"libraryService": map[string]interface{}{
			"findBooks": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.libraryServiceFindBooks(this, args)
			}),
			"checkoutBook": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.libraryServiceCheckoutBook(this, args)
			}),
			"returnBook": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.libraryServiceReturnBook(this, args)
			}),
			"getUserBooks": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.libraryServiceGetUserBooks(this, args)
			}),
		},
	}
	js.Global().Set("libraryModule", js.ValueOf(libraryModule))

	fmt.Println("library_services WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

// libraryServiceFindBooks handles the FindBooks method for LibraryService
func (exports *Library_servicesServicesExports) libraryServiceFindBooks(this js.Value, args []js.Value) any {
	if exports.LibraryService == nil {
		return createJSResponse(false, "LibraryService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	var req *libraryv1.FindBooksRequest
	if err := protojson.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.LibraryService.FindBooks(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response
	responseJSON, err := protojson.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// libraryServiceCheckoutBook handles the CheckoutBook method for LibraryService
func (exports *Library_servicesServicesExports) libraryServiceCheckoutBook(this js.Value, args []js.Value) any {
	if exports.LibraryService == nil {
		return createJSResponse(false, "LibraryService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	var req *libraryv1.CheckoutBookRequest
	if err := protojson.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.LibraryService.CheckoutBook(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response
	responseJSON, err := protojson.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// libraryServiceReturnBook handles the ReturnBook method for LibraryService
func (exports *Library_servicesServicesExports) libraryServiceReturnBook(this js.Value, args []js.Value) any {
	if exports.LibraryService == nil {
		return createJSResponse(false, "LibraryService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	var req *libraryv1.ReturnBookRequest
	if err := protojson.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.LibraryService.ReturnBook(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response
	responseJSON, err := protojson.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// libraryServiceGetUserBooks handles the GetUserBooks method for LibraryService
func (exports *Library_servicesServicesExports) libraryServiceGetUserBooks(this js.Value, args []js.Value) any {
	if exports.LibraryService == nil {
		return createJSResponse(false, "LibraryService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	var req *libraryv1.GetUserBooksRequest
	if err := protojson.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.LibraryService.GetUserBooks(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response
	responseJSON, err := protojson.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse creates a JavaScript-compatible response
func createJSResponse(success bool, message string, data any) any {
	response := map[string]any{
		"success": success,
		"message": message,
		"data":    data,
	}

	// Convert to JS Value
	responseBytes, err := json.Marshal(response)
	if err != nil {
		fmt.Printf("Failed to marshal JSON response: %v\n", err)
		// Return a simple error response
		errorResponse := map[string]any{
			"success": false,
			"message": fmt.Sprintf("JSON marshal error: %v", err),
			"data":    nil,
		}
		errorBytes, _ := json.Marshal(errorResponse)
		return js.Global().Get("JSON").Call("parse", string(errorBytes))
	}

	return js.Global().Get("JSON").Call("parse", string(responseBytes))
}
