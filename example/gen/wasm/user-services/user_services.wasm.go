//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: library/v1/library.proto

package user_services

import (
	"context"
	"encoding/json"
	"fmt"
	"syscall/js"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	libraryv1 "github.com/panyam/protoc-gen-go-wasmjs/example/gen/go/library/v1"
)

// User_servicesServicesExports provides WASM exports for dependency injection
type User_servicesServicesExports struct {
	UserService libraryv1.UserServiceServer
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *User_servicesServicesExports) RegisterAPI() {
	fmt.Println("user_services WASM module loading...")
	// Create namespaced API structure
	userModule := map[string]interface{}{
		"userService": map[string]interface{}{
			"getUser": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.userServiceGetUser(this, args)
			}),
			"createUser": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.userServiceCreateUser(this, args)
			}),
		},
	}
	js.Global().Set("userModule", js.ValueOf(userModule))

	fmt.Println("user_services WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

// userServiceGetUser handles the GetUser method for UserService
func (exports *User_servicesServicesExports) userServiceGetUser(this js.Value, args []js.Value) any {
	if exports.UserService == nil {
		return createJSResponse(false, "UserService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &libraryv1.GetUserRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.UserService.GetUser(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: false, // Don't emit zero values
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// userServiceCreateUser handles the CreateUser method for UserService
func (exports *User_servicesServicesExports) userServiceCreateUser(this js.Value, args []js.Value) any {
	if exports.UserService == nil {
		return createJSResponse(false, "UserService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &libraryv1.CreateUserRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.UserService.CreateUser(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: false, // Don't emit zero values
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse creates a JavaScript-compatible response
func createJSResponse(success bool, message string, data any) any {
	response := map[string]any{
		"success": success,
		"message": message,
		"data":    data,
	}

	// Convert to JS Value
	responseBytes, err := json.Marshal(response)
	if err != nil {
		fmt.Printf("Failed to marshal JSON response: %v\n", err)
		// Return a simple error response
		errorResponse := map[string]any{
			"success": false,
			"message": fmt.Sprintf("JSON marshal error: %v", err),
			"data":    nil,
		}
		errorBytes, _ := json.Marshal(errorResponse)
		return js.Global().Get("JSON").Call("parse", string(errorBytes))
	}

	return js.Global().Get("JSON").Call("parse", string(responseBytes))
}
