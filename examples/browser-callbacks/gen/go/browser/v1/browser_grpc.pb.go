// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: browser/v1/browser.proto

package browserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrowserAPI_Fetch_FullMethodName           = "/browser.v1.BrowserAPI/Fetch"
	BrowserAPI_GetLocalStorage_FullMethodName = "/browser.v1.BrowserAPI/GetLocalStorage"
	BrowserAPI_SetLocalStorage_FullMethodName = "/browser.v1.BrowserAPI/SetLocalStorage"
	BrowserAPI_GetCookie_FullMethodName       = "/browser.v1.BrowserAPI/GetCookie"
	BrowserAPI_Alert_FullMethodName           = "/browser.v1.BrowserAPI/Alert"
	BrowserAPI_PromptUser_FullMethodName      = "/browser.v1.BrowserAPI/PromptUser"
	BrowserAPI_LogToWindow_FullMethodName     = "/browser.v1.BrowserAPI/LogToWindow"
)

// BrowserAPIClient is the client API for BrowserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BrowserAPI provides access to browser functionality from WASM
type BrowserAPIClient interface {
	// Fetch makes an HTTP request from the browser
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// GetLocalStorage retrieves a value from localStorage
	GetLocalStorage(ctx context.Context, in *StorageKeyRequest, opts ...grpc.CallOption) (*StorageValueResponse, error)
	// SetLocalStorage stores a value in localStorage
	SetLocalStorage(ctx context.Context, in *StorageSetRequest, opts ...grpc.CallOption) (*StorageSetResponse, error)
	// GetCookie retrieves a cookie value
	GetCookie(ctx context.Context, in *CookieRequest, opts ...grpc.CallOption) (*CookieResponse, error)
	// Alert shows a browser alert dialog
	Alert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	// PromptUser shows a prompt dialog and returns the user's input
	PromptUser(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
	// LogToWindow appends a log message to the DOM
	LogToWindow(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type browserAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserAPIClient(cc grpc.ClientConnInterface) BrowserAPIClient {
	return &browserAPIClient{cc}
}

func (c *browserAPIClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) GetLocalStorage(ctx context.Context, in *StorageKeyRequest, opts ...grpc.CallOption) (*StorageValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageValueResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_GetLocalStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) SetLocalStorage(ctx context.Context, in *StorageSetRequest, opts ...grpc.CallOption) (*StorageSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSetResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_SetLocalStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) GetCookie(ctx context.Context, in *CookieRequest, opts ...grpc.CallOption) (*CookieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CookieResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_GetCookie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) Alert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_Alert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) PromptUser(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_PromptUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserAPIClient) LogToWindow(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, BrowserAPI_LogToWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrowserAPIServer is the server API for BrowserAPI service.
// All implementations must embed UnimplementedBrowserAPIServer
// for forward compatibility.
//
// BrowserAPI provides access to browser functionality from WASM
type BrowserAPIServer interface {
	// Fetch makes an HTTP request from the browser
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// GetLocalStorage retrieves a value from localStorage
	GetLocalStorage(context.Context, *StorageKeyRequest) (*StorageValueResponse, error)
	// SetLocalStorage stores a value in localStorage
	SetLocalStorage(context.Context, *StorageSetRequest) (*StorageSetResponse, error)
	// GetCookie retrieves a cookie value
	GetCookie(context.Context, *CookieRequest) (*CookieResponse, error)
	// Alert shows a browser alert dialog
	Alert(context.Context, *AlertRequest) (*AlertResponse, error)
	// PromptUser shows a prompt dialog and returns the user's input
	PromptUser(context.Context, *PromptRequest) (*PromptResponse, error)
	// LogToWindow appends a log message to the DOM
	LogToWindow(context.Context, *LogRequest) (*LogResponse, error)
	mustEmbedUnimplementedBrowserAPIServer()
}

// UnimplementedBrowserAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrowserAPIServer struct{}

func (UnimplementedBrowserAPIServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedBrowserAPIServer) GetLocalStorage(context.Context, *StorageKeyRequest) (*StorageValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalStorage not implemented")
}
func (UnimplementedBrowserAPIServer) SetLocalStorage(context.Context, *StorageSetRequest) (*StorageSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocalStorage not implemented")
}
func (UnimplementedBrowserAPIServer) GetCookie(context.Context, *CookieRequest) (*CookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookie not implemented")
}
func (UnimplementedBrowserAPIServer) Alert(context.Context, *AlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alert not implemented")
}
func (UnimplementedBrowserAPIServer) PromptUser(context.Context, *PromptRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptUser not implemented")
}
func (UnimplementedBrowserAPIServer) LogToWindow(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogToWindow not implemented")
}
func (UnimplementedBrowserAPIServer) mustEmbedUnimplementedBrowserAPIServer() {}
func (UnimplementedBrowserAPIServer) testEmbeddedByValue()                    {}

// UnsafeBrowserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserAPIServer will
// result in compilation errors.
type UnsafeBrowserAPIServer interface {
	mustEmbedUnimplementedBrowserAPIServer()
}

func RegisterBrowserAPIServer(s grpc.ServiceRegistrar, srv BrowserAPIServer) {
	// If the following call pancis, it indicates UnimplementedBrowserAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrowserAPI_ServiceDesc, srv)
}

func _BrowserAPI_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_GetLocalStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).GetLocalStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_GetLocalStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).GetLocalStorage(ctx, req.(*StorageKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_SetLocalStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).SetLocalStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_SetLocalStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).SetLocalStorage(ctx, req.(*StorageSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_GetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).GetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_GetCookie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).GetCookie(ctx, req.(*CookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_Alert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).Alert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_Alert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).Alert(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_PromptUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).PromptUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_PromptUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).PromptUser(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserAPI_LogToWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserAPIServer).LogToWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrowserAPI_LogToWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserAPIServer).LogToWindow(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrowserAPI_ServiceDesc is the grpc.ServiceDesc for BrowserAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrowserAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "browser.v1.BrowserAPI",
	HandlerType: (*BrowserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _BrowserAPI_Fetch_Handler,
		},
		{
			MethodName: "GetLocalStorage",
			Handler:    _BrowserAPI_GetLocalStorage_Handler,
		},
		{
			MethodName: "SetLocalStorage",
			Handler:    _BrowserAPI_SetLocalStorage_Handler,
		},
		{
			MethodName: "GetCookie",
			Handler:    _BrowserAPI_GetCookie_Handler,
		},
		{
			MethodName: "Alert",
			Handler:    _BrowserAPI_Alert_Handler,
		},
		{
			MethodName: "PromptUser",
			Handler:    _BrowserAPI_PromptUser_Handler,
		},
		{
			MethodName: "LogToWindow",
			Handler:    _BrowserAPI_LogToWindow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "browser/v1/browser.proto",
}
