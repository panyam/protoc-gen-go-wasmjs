// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: presenter/v1/presenter.proto

package presenterv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PresenterService_LoadUserData_FullMethodName    = "/presenter.v1.PresenterService/LoadUserData"
	PresenterService_UpdateUIState_FullMethodName   = "/presenter.v1.PresenterService/UpdateUIState"
	PresenterService_SavePreferences_FullMethodName = "/presenter.v1.PresenterService/SavePreferences"
)

// PresenterServiceClient is the client API for PresenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PresenterService runs in WASM and drives UI logic
type PresenterServiceClient interface {
	// LoadUserData fetches user data from API and stores it locally
	LoadUserData(ctx context.Context, in *LoadUserRequest, opts ...grpc.CallOption) (*LoadUserResponse, error)
	// UpdateUIState processes state changes and returns UI updates
	UpdateUIState(ctx context.Context, in *StateUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UIUpdate], error)
	// SavePreferences saves user preferences to localStorage
	SavePreferences(ctx context.Context, in *PreferencesRequest, opts ...grpc.CallOption) (*PreferencesResponse, error)
}

type presenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenterServiceClient(cc grpc.ClientConnInterface) PresenterServiceClient {
	return &presenterServiceClient{cc}
}

func (c *presenterServiceClient) LoadUserData(ctx context.Context, in *LoadUserRequest, opts ...grpc.CallOption) (*LoadUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadUserResponse)
	err := c.cc.Invoke(ctx, PresenterService_LoadUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenterServiceClient) UpdateUIState(ctx context.Context, in *StateUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UIUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PresenterService_ServiceDesc.Streams[0], PresenterService_UpdateUIState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateUpdateRequest, UIUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PresenterService_UpdateUIStateClient = grpc.ServerStreamingClient[UIUpdate]

func (c *presenterServiceClient) SavePreferences(ctx context.Context, in *PreferencesRequest, opts ...grpc.CallOption) (*PreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreferencesResponse)
	err := c.cc.Invoke(ctx, PresenterService_SavePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenterServiceServer is the server API for PresenterService service.
// All implementations must embed UnimplementedPresenterServiceServer
// for forward compatibility.
//
// PresenterService runs in WASM and drives UI logic
type PresenterServiceServer interface {
	// LoadUserData fetches user data from API and stores it locally
	LoadUserData(context.Context, *LoadUserRequest) (*LoadUserResponse, error)
	// UpdateUIState processes state changes and returns UI updates
	UpdateUIState(*StateUpdateRequest, grpc.ServerStreamingServer[UIUpdate]) error
	// SavePreferences saves user preferences to localStorage
	SavePreferences(context.Context, *PreferencesRequest) (*PreferencesResponse, error)
	mustEmbedUnimplementedPresenterServiceServer()
}

// UnimplementedPresenterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPresenterServiceServer struct{}

func (UnimplementedPresenterServiceServer) LoadUserData(context.Context, *LoadUserRequest) (*LoadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadUserData not implemented")
}
func (UnimplementedPresenterServiceServer) UpdateUIState(*StateUpdateRequest, grpc.ServerStreamingServer[UIUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateUIState not implemented")
}
func (UnimplementedPresenterServiceServer) SavePreferences(context.Context, *PreferencesRequest) (*PreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePreferences not implemented")
}
func (UnimplementedPresenterServiceServer) mustEmbedUnimplementedPresenterServiceServer() {}
func (UnimplementedPresenterServiceServer) testEmbeddedByValue()                          {}

// UnsafePresenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenterServiceServer will
// result in compilation errors.
type UnsafePresenterServiceServer interface {
	mustEmbedUnimplementedPresenterServiceServer()
}

func RegisterPresenterServiceServer(s grpc.ServiceRegistrar, srv PresenterServiceServer) {
	// If the following call pancis, it indicates UnimplementedPresenterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PresenterService_ServiceDesc, srv)
}

func _PresenterService_LoadUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenterServiceServer).LoadUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenterService_LoadUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenterServiceServer).LoadUserData(ctx, req.(*LoadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresenterService_UpdateUIState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PresenterServiceServer).UpdateUIState(m, &grpc.GenericServerStream[StateUpdateRequest, UIUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PresenterService_UpdateUIStateServer = grpc.ServerStreamingServer[UIUpdate]

func _PresenterService_SavePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenterServiceServer).SavePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresenterService_SavePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenterServiceServer).SavePreferences(ctx, req.(*PreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresenterService_ServiceDesc is the grpc.ServiceDesc for PresenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "presenter.v1.PresenterService",
	HandlerType: (*PresenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadUserData",
			Handler:    _PresenterService_LoadUserData_Handler,
		},
		{
			MethodName: "SavePreferences",
			Handler:    _PresenterService_SavePreferences_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateUIState",
			Handler:       _PresenterService_UpdateUIState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "presenter/v1/presenter.proto",
}
