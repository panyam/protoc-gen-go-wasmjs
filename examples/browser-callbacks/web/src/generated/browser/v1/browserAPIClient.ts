// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: browser/v1/browser.proto

import { BrowserServiceManager, WASMResponse, WasmError, WASMServiceClient } from '@protoc-gen-go-wasmjs/runtime';

// Import TypeScript types for method signatures
import {
    StorageKeyRequest,
    StorageValueResponse,
    StorageSetRequest,
    StorageSetResponse,
    PromptRequest,
    PromptResponse,
    CookieRequest,
    CookieResponse,
    AlertRequest,
    AlertResponse,
    LogRequest,
    LogResponse,
    FetchRequest,
    FetchResponse,
} from './interfaces';
/**
 * BrowserAPI service client interface
 * Fully typed method signatures with TypeScript interfaces
 */
export interface BrowserAPIMethods {
	fetch(request: FetchRequest): Promise<FetchResponse>;
	getLocalStorage(request: StorageKeyRequest): Promise<StorageValueResponse>;
	setLocalStorage(request: StorageSetRequest): Promise<StorageSetResponse>;
	getCookie(request: CookieRequest): Promise<CookieResponse>;
	alert(request: AlertRequest): Promise<AlertResponse>;
	promptUser(request: PromptRequest): Promise<PromptResponse>;
	logToWindow(request: LogRequest): Promise<LogResponse>;
}

// Base WASMServiceClient functionality is now imported from @protoc-gen-go-wasmjs/runtime

/**
 * browser_v1 WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class Browser_v1Client extends WASMServiceClient {
    // Service-specific clients
    public readonly browserAPI: BrowserAPIClientImpl;

    constructor() {
        super();
        this.browserAPI = new BrowserAPIClientImpl(this);
    }

    // loadWasm method inherited from WASMServiceClient base class

    /**
     * Load the WASM module implementation (implements abstract method)
     */
    protected async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading browser_v1 WASM module...');

        // Check if WASM is already loaded (for testing environments)
        if ((window as any).browserCallbacks) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).browserCallbacks;
            return;
        }

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Start browser service manager (always available for cross-package browser services)
        if (this.browserServiceManager) {
            this.browserServiceManager.setWasmModule(window);
            this.browserServiceManager.startProcessing();
        }

        // Verify WASM APIs are available
        if (!(window as any).browserCallbacks) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).browserCallbacks;

        console.log('browser_v1 WASM module loaded successfully');
    }

    /**
     * Get WASM method function by path (required by base class)
     */
    protected getWasmMethod(methodPath: string): Function {
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
    }
}
/**
 * BrowserAPI service client implementation
 */
class BrowserAPIClientImpl implements BrowserAPIMethods {
    constructor(private parent: Browser_v1Client) {}
    async fetch(request: FetchRequest): Promise<FetchResponse> {
        return this.parent.callMethod('browserAPI.fetch', request);
    }
    async getLocalStorage(request: StorageKeyRequest): Promise<StorageValueResponse> {
        return this.parent.callMethod('browserAPI.getLocalStorage', request);
    }
    async setLocalStorage(request: StorageSetRequest): Promise<StorageSetResponse> {
        return this.parent.callMethod('browserAPI.setLocalStorage', request);
    }
    async getCookie(request: CookieRequest): Promise<CookieResponse> {
        return this.parent.callMethod('browserAPI.getCookie', request);
    }
    async alert(request: AlertRequest): Promise<AlertResponse> {
        return this.parent.callMethod('browserAPI.alert', request);
    }
    async promptUser(request: PromptRequest): Promise<PromptResponse> {
        return this.parent.callMethod('browserAPI.promptUser', request);
    }
    async logToWindow(request: LogRequest): Promise<LogResponse> {
        return this.parent.callMethod('browserAPI.logToWindow', request);
    }
}

// Re-export BrowserServiceManager for cross-package use
export { BrowserServiceManager };

// Export the main client class as default
export default Browser_v1Client;
