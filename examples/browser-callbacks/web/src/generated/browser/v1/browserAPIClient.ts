// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: browser/v1/browser.proto

import { ServiceClient } from '@protoc-gen-go-wasmjs/runtime';

// Import TypeScript types for method signatures
import {
    FetchRequest,
    FetchResponse,
    StorageKeyRequest,
    StorageValueResponse,
    StorageSetRequest,
    CookieResponse,
    AlertRequest,
    AlertResponse,
    StorageSetResponse,
    CookieRequest,
    PromptRequest,
    PromptResponse,
    LogRequest,
    LogResponse,
} from './interfaces';
/**
 * BrowserAPI service client interface
 * Fully typed method signatures with TypeScript interfaces
 */
export interface BrowserAPIMethods {
	fetch(request: FetchRequest): Promise<FetchResponse>;
	getLocalStorage(request: StorageKeyRequest): Promise<StorageValueResponse>;
	setLocalStorage(request: StorageSetRequest): Promise<StorageSetResponse>;
	getCookie(request: CookieRequest): Promise<CookieResponse>;
	alert(request: AlertRequest): Promise<AlertResponse>;
	promptUser(request: PromptRequest): Promise<PromptResponse>;
	logToWindow(request: LogRequest): Promise<LogResponse>;
}
/**
 * BrowserAPI service client implementation
 * Lightweight facade that uses shared WASM bundle
 */
export class BrowserAPIServiceClient extends ServiceClient implements BrowserAPIMethods {
    async fetch(request: FetchRequest): Promise<FetchResponse> {
        return this.callMethod('browserAPI.fetch', request);
    }
    async getLocalStorage(request: StorageKeyRequest): Promise<StorageValueResponse> {
        return this.callMethod('browserAPI.getLocalStorage', request);
    }
    async setLocalStorage(request: StorageSetRequest): Promise<StorageSetResponse> {
        return this.callMethod('browserAPI.setLocalStorage', request);
    }
    async getCookie(request: CookieRequest): Promise<CookieResponse> {
        return this.callMethod('browserAPI.getCookie', request);
    }
    async alert(request: AlertRequest): Promise<AlertResponse> {
        return this.callMethod('browserAPI.alert', request);
    }
    async promptUser(request: PromptRequest): Promise<PromptResponse> {
        return this.callMethod('browserAPI.promptUser', request);
    }
    async logToWindow(request: LogRequest): Promise<LogResponse> {
        return this.callMethod('browserAPI.logToWindow', request);
    }
}
