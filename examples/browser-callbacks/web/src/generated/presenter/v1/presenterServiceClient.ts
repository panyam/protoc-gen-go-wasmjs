// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: presenter/v1/presenter.proto

import { BrowserServiceManager, WASMResponse, WasmError, WASMServiceClient } from '@protoc-gen-go-wasmjs/runtime';
/**
 * PresenterService service client interface
 * Uses any types since we generate our own TypeScript interfaces
 */
export interface PresenterServiceMethods {
	loadUserData(request: any): Promise<any>;
	updateUIState(request: any, callback: (response: any | null, error: string | null, done: boolean) => boolean): void;
	savePreferences(request: any): Promise<any>;
	runCallbackDemo(request: any, callback: (response: any, error?: string) => void): Promise<void>;
}

// Base WASMServiceClient functionality is now imported from @protoc-gen-go-wasmjs/runtime

/**
 * presenter_v1 WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class Presenter_v1Client extends WASMServiceClient {
    // Service-specific clients
    public readonly presenterService: PresenterServiceClientImpl;

    constructor() {
        super();
        this.presenterService = new PresenterServiceClientImpl(this);
    }

    // loadWasm method inherited from WASMServiceClient base class

    /**
     * Load the WASM module implementation (implements abstract method)
     */
    protected async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading presenter_v1 WASM module...');

        // Check if WASM is already loaded (for testing environments)
        if ((window as any).browserCallbacks) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).browserCallbacks;
            return;
        }

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Start browser service manager (always available for cross-package browser services)
        if (this.browserServiceManager) {
            this.browserServiceManager.setWasmModule(window);
            this.browserServiceManager.startProcessing();
        }

        // Verify WASM APIs are available
        if (!(window as any).browserCallbacks) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).browserCallbacks;

        console.log('presenter_v1 WASM module loaded successfully');
    }

    /**
     * Get WASM method function by path (required by base class)
     */
    protected getWasmMethod(methodPath: string): Function {
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
    }
}
/**
 * PresenterService service client implementation
 */
class PresenterServiceClientImpl implements PresenterServiceMethods {
    constructor(private parent: Presenter_v1Client) {}
    async loadUserData(request: any): Promise<any> {
        return this.parent.callMethod('presenterService.loadUserData', request);
    }
    updateUIState(
        request: any,
        callback: (response: any | null, error: string | null, done: boolean) => boolean
    ): void {
        return this.parent.callStreamingMethod('presenterService.updateUIState', request, callback);
    }
    async savePreferences(request: any): Promise<any> {
        return this.parent.callMethod('presenterService.savePreferences', request);
    }
    async runCallbackDemo(request: any, callback: (response: any, error?: string) => void): Promise<void> {
        return this.parent.callMethodWithCallback('presenterService.runCallbackDemo', request, callback);
    }
}

// Re-export BrowserServiceManager for cross-package use
export { BrowserServiceManager };

// Export the main client class as default
export default Presenter_v1Client;
