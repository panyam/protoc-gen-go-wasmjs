// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: presenter/v1/presenter.proto

import { WASMBundle, WASMBundleConfig, ServiceClient } from '@protoc-gen-go-wasmjs/runtime';

// Import TypeScript types for method signatures
import {
    StateUpdateRequest,
    UIUpdate,
    PreferencesRequest,
    PreferencesResponse,
    CallbackDemoRequest,
    CallbackDemoResponse,
    LoadUserRequest,
    LoadUserResponse,
} from './interfaces';
/**
 * PresenterService service client interface
 * Fully typed method signatures with TypeScript interfaces
 */
export interface PresenterServiceMethods {
	loadUserData(request: LoadUserRequest): Promise<LoadUserResponse>;
	updateUIState(request: StateUpdateRequest, callback: (response: UIUpdate | null, error: string | null, done: boolean) => boolean): void;
	savePreferences(request: PreferencesRequest): Promise<PreferencesResponse>;
	runCallbackDemo(request: CallbackDemoRequest, callback: (response: CallbackDemoResponse, error?: string) => void): Promise<void>;
}

/**
 * presenter_v1 WASM bundle - manages shared WASM module
 * One bundle per WASM file, shared by multiple service clients
 */
export class Presenter_v1Bundle {
    private wasmBundle: WASMBundle;

    // Service clients that share this bundle
    public readonly presenterService: PresenterServiceServiceClient;

    constructor() {
        const config: WASMBundleConfig = {
            moduleName: 'presenter_v1',
            apiStructure: 'namespaced',
            jsNamespace: 'browserCallbacks'
        };

        this.wasmBundle = new WASMBundle(config);

        // Initialize service clients with shared bundle
        this.presenterService = new PresenterServiceServiceClient(this.wasmBundle);
    }

    /**
     * Register a browser service implementation
     */
    public registerBrowserService(name: string, implementation: any): void {
        this.wasmBundle.registerBrowserService(name, implementation);
    }

    /**
     * Load the WASM module asynchronously (singleton pattern)
     */
    public async loadWasm(wasmPath: string): Promise<void> {
        return this.wasmBundle.loadWasm(wasmPath);
    }

    /**
     * Check if WASM bundle is ready for operations
     */
    public isReady(): boolean {
        return this.wasmBundle.isReady();
    }

    /**
     * Wait for WASM bundle to be ready
     */
    public async waitUntilReady(): Promise<void> {
        return this.wasmBundle.waitUntilReady();
    }
}
/**
 * PresenterService service client implementation
 * Lightweight facade that uses shared WASM bundle
 */
export class PresenterServiceServiceClient extends ServiceClient implements PresenterServiceMethods {
    async loadUserData(request: LoadUserRequest): Promise<LoadUserResponse> {
        return this.callMethod('presenterService.loadUserData', request);
    }
    updateUIState(
        request: StateUpdateRequest,
        callback: (response: UIUpdate | null, error: string | null, done: boolean) => boolean
    ): void {
        return this.callStreamingMethod('presenterService.updateUIState', request, callback);
    }
    async savePreferences(request: PreferencesRequest): Promise<PreferencesResponse> {
        return this.callMethod('presenterService.savePreferences', request);
    }
    async runCallbackDemo(request: CallbackDemoRequest, callback: (response: CallbackDemoResponse, error?: string) => void): Promise<void> {
        return this.callMethodWithCallback('presenterService.runCallbackDemo', request, callback);
    }
}

// Export the main bundle class as default
export default Presenter_v1Bundle;
