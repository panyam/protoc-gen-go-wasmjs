// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: presenter/v1/presenter.proto

import { ServiceClient } from '@protoc-gen-go-wasmjs/runtime';

// Import TypeScript types for method signatures
import {
    StateUpdateRequest,
    UIUpdate,
    PreferencesRequest,
    PreferencesResponse,
    CallbackDemoRequest,
    CallbackDemoResponse,
    LoadUserDataRequest,
    LoadUserDataResponse,
} from './interfaces';
/**
 * PresenterService service client interface
 * Fully typed method signatures with TypeScript interfaces
 */
export interface PresenterServiceMethods {
	loadUserData(request: LoadUserDataRequest): Promise<LoadUserDataResponse>;
	updateUIState(request: StateUpdateRequest, callback: (response: UIUpdate | null, error: string | null, done: boolean) => boolean): void;
	savePreferences(request: PreferencesRequest): Promise<PreferencesResponse>;
	runCallbackDemo(request: CallbackDemoRequest, callback: (response: CallbackDemoResponse, error?: string) => void): Promise<void>;
}
/**
 * PresenterService service client implementation
 * Lightweight facade that uses shared WASM bundle
 */
export class PresenterServiceServiceClient extends ServiceClient implements PresenterServiceMethods {
    async loadUserData(request: LoadUserDataRequest): Promise<LoadUserDataResponse> {
        return this.callMethod('presenterService.loadUserData', request);
    }
    updateUIState(
        request: StateUpdateRequest,
        callback: (response: UIUpdate | null, error: string | null, done: boolean) => boolean
    ): void {
        return this.callStreamingMethod('presenterService.updateUIState', request, callback);
    }
    async savePreferences(request: PreferencesRequest): Promise<PreferencesResponse> {
        return this.callMethod('presenterService.savePreferences', request);
    }
    async runCallbackDemo(request: CallbackDemoRequest, callback: (response: CallbackDemoResponse, error?: string) => void): Promise<void> {
        return this.callMethodWithCallback('presenterService.runCallbackDemo', request, callback);
    }
}
