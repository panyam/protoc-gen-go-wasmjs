// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: connect4/game.proto

package connect4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Connect4Service_GetGame_FullMethodName    = "/connect4.Connect4Service/GetGame"
	Connect4Service_DropPiece_FullMethodName  = "/connect4.Connect4Service/DropPiece"
	Connect4Service_JoinGame_FullMethodName   = "/connect4.Connect4Service/JoinGame"
	Connect4Service_CreateGame_FullMethodName = "/connect4.Connect4Service/CreateGame"
)

// Connect4ServiceClient is the client API for Connect4Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Connect4ServiceClient interface {
	// Get current game state
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GameState, error)
	// Drop a piece in a column - returns patches for real-time updates
	DropPiece(ctx context.Context, in *DropPieceRequest, opts ...grpc.CallOption) (*DropPieceResponse, error)
	// Join game as a player
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	// Create a new game with custom settings
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
}

type connect4ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnect4ServiceClient(cc grpc.ClientConnInterface) Connect4ServiceClient {
	return &connect4ServiceClient{cc}
}

func (c *connect4ServiceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GameState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameState)
	err := c.cc.Invoke(ctx, Connect4Service_GetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4ServiceClient) DropPiece(ctx context.Context, in *DropPieceRequest, opts ...grpc.CallOption) (*DropPieceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropPieceResponse)
	err := c.cc.Invoke(ctx, Connect4Service_DropPiece_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4ServiceClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, Connect4Service_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4ServiceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, Connect4Service_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Connect4ServiceServer is the server API for Connect4Service service.
// All implementations must embed UnimplementedConnect4ServiceServer
// for forward compatibility.
type Connect4ServiceServer interface {
	// Get current game state
	GetGame(context.Context, *GetGameRequest) (*GameState, error)
	// Drop a piece in a column - returns patches for real-time updates
	DropPiece(context.Context, *DropPieceRequest) (*DropPieceResponse, error)
	// Join game as a player
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	// Create a new game with custom settings
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	mustEmbedUnimplementedConnect4ServiceServer()
}

// UnimplementedConnect4ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnect4ServiceServer struct{}

func (UnimplementedConnect4ServiceServer) GetGame(context.Context, *GetGameRequest) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedConnect4ServiceServer) DropPiece(context.Context, *DropPieceRequest) (*DropPieceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPiece not implemented")
}
func (UnimplementedConnect4ServiceServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedConnect4ServiceServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedConnect4ServiceServer) mustEmbedUnimplementedConnect4ServiceServer() {}
func (UnimplementedConnect4ServiceServer) testEmbeddedByValue()                         {}

// UnsafeConnect4ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Connect4ServiceServer will
// result in compilation errors.
type UnsafeConnect4ServiceServer interface {
	mustEmbedUnimplementedConnect4ServiceServer()
}

func RegisterConnect4ServiceServer(s grpc.ServiceRegistrar, srv Connect4ServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnect4ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Connect4Service_ServiceDesc, srv)
}

func _Connect4Service_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4ServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Service_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4ServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4Service_DropPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4ServiceServer).DropPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Service_DropPiece_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4ServiceServer).DropPiece(ctx, req.(*DropPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4Service_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4ServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Service_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4ServiceServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4Service_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4ServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4Service_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4ServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connect4Service_ServiceDesc is the grpc.ServiceDesc for Connect4Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect4Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect4.Connect4Service",
	HandlerType: (*Connect4ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _Connect4Service_GetGame_Handler,
		},
		{
			MethodName: "DropPiece",
			Handler:    _Connect4Service_DropPiece_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _Connect4Service_JoinGame_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Connect4Service_CreateGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect4/game.proto",
}
