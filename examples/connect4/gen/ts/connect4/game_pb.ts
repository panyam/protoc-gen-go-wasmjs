// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file connect4/game.proto (package connect4, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_wasmjs_v1_annotations } from "../wasmjs/v1/annotations_pb";
import type { MessagePatch } from "../wasmjs/v1/patches_pb";
import { file_wasmjs_v1_patches } from "../wasmjs/v1/patches_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file connect4/game.proto.
 */
export const file_connect4_game: GenFile = /*@__PURE__*/
  fileDesc("ChNjb25uZWN0NC9nYW1lLnByb3RvEghjb25uZWN0NCKtAwoJR2FtZVN0YXRlEg8KB2dhbWVfaWQYASABKAkSJAoGY29uZmlnGAIgASgLMhQuY29ubmVjdDQuR2FtZUNvbmZpZxIhCgdwbGF5ZXJzGAMgAygLMhAuY29ubmVjdDQuUGxheWVyEiIKBWJvYXJkGAQgASgLMhMuY29ubmVjdDQuR2FtZUJvYXJkEhkKEWN1cnJlbnRfcGxheWVyX2lkGAUgASgJEhMKC3R1cm5fbnVtYmVyGAYgASgFEiQKBnN0YXR1cxgHIAEoDjIULmNvbm5lY3Q0LkdhbWVTdGF0dXMSDwoHd2lubmVycxgIIAMoCRI6CgxwbGF5ZXJfc3RhdHMYCSADKAsyJC5jb25uZWN0NC5HYW1lU3RhdGUuUGxheWVyU3RhdHNFbnRyeRIWCg5sYXN0X21vdmVfdGltZRgKIAEoAxIcChRtb3ZlX3RpbWVvdXRfc2Vjb25kcxgLIAEoBRpJChBQbGF5ZXJTdGF0c0VudHJ5EgsKA2tleRgBIAEoCRIkCgV2YWx1ZRgCIAEoCzIVLmNvbm5lY3Q0LlBsYXllclN0YXRzOgI4ASK3AQoKR2FtZUNvbmZpZxITCgtib2FyZF93aWR0aBgBIAEoBRIUCgxib2FyZF9oZWlnaHQYAiABKAUSEwoLbWluX3BsYXllcnMYAyABKAUSEwoLbWF4X3BsYXllcnMYBCABKAUSFgoOY29ubmVjdF9sZW5ndGgYBSABKAUSHgoWYWxsb3dfbXVsdGlwbGVfd2lubmVycxgGIAEoCBIcChRtb3ZlX3RpbWVvdXRfc2Vjb25kcxgHIAEoBSJbCgZQbGF5ZXISCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRINCgVjb2xvchgDIAEoCRIUCgxpc19jb25uZWN0ZWQYBCABKAgSEgoKam9pbl9vcmRlchgFIAEoBSJkCglHYW1lQm9hcmQSDQoFd2lkdGgYASABKAUSDgoGaGVpZ2h0GAIgASgFEiAKBHJvd3MYAyADKAsyEi5jb25uZWN0NC5Cb2FyZFJvdxIWCg5jb2x1bW5faGVpZ2h0cxgEIAMoBSIZCghCb2FyZFJvdxINCgVjZWxscxgBIAMoCSJlCgtQbGF5ZXJTdGF0cxIVCg1waWVjZXNfcGxheWVkGAEgASgFEhUKDXdpbm5pbmdfbGluZXMYAiABKAUSDwoHaGFzX3dvbhgDIAEoCBIXCg90b3RhbF9tb3ZlX3RpbWUYBCABKAMiIQoOR2V0R2FtZVJlcXVlc3QSDwoHZ2FtZV9pZBgBIAEoCSJGChBEcm9wUGllY2VSZXF1ZXN0Eg8KB2dhbWVfaWQYASABKAkSEQoJcGxheWVyX2lkGAIgASgJEg4KBmNvbHVtbhgDIAEoBSKnAQoRRHJvcFBpZWNlUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIVCg1lcnJvcl9tZXNzYWdlGAIgASgJEigKB3BhdGNoZXMYAyADKAsyFy53YXNtanMudjEuTWVzc2FnZVBhdGNoEhUKDWNoYW5nZV9udW1iZXIYBCABKAMSKQoGcmVzdWx0GAUgASgLMhkuY29ubmVjdDQuUGllY2VEcm9wUmVzdWx0InoKD1BpZWNlRHJvcFJlc3VsdBIRCglmaW5hbF9yb3cYASABKAUSFAoMZmluYWxfY29sdW1uGAIgASgFEhMKC2Zvcm1lZF9saW5lGAMgASgIEikKDXdpbm5pbmdfbGluZXMYBCADKAsyEi5jb25uZWN0NC5MaW5lSW5mbyJUCghMaW5lSW5mbxIlCglwb3NpdGlvbnMYASADKAsyEi5jb25uZWN0NC5Qb3NpdGlvbhIRCglkaXJlY3Rpb24YAiABKAkSDgoGbGVuZ3RoGAMgASgFIicKCFBvc2l0aW9uEgsKA3JvdxgBIAEoBRIOCgZjb2x1bW4YAiABKAUiUAoPSm9pbkdhbWVSZXF1ZXN0Eg8KB2dhbWVfaWQYASABKAkSEwoLcGxheWVyX25hbWUYAiABKAkSFwoPcHJlZmVycmVkX2NvbG9yGAMgASgJIo4BChBKb2luR2FtZVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCRIRCglwbGF5ZXJfaWQYAyABKAkSFgoOYXNzaWduZWRfY29sb3IYBCABKAkSJwoKZ2FtZV9zdGF0ZRgFIAEoCzITLmNvbm5lY3Q0LkdhbWVTdGF0ZSJgChFDcmVhdGVHYW1lUmVxdWVzdBIPCgdnYW1lX2lkGAEgASgJEiQKBmNvbmZpZxgCIAEoCzIULmNvbm5lY3Q0LkdhbWVDb25maWcSFAoMY3JlYXRvcl9uYW1lGAMgASgJIngKEkNyZWF0ZUdhbWVSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEhUKDWVycm9yX21lc3NhZ2UYAiABKAkSEQoJcGxheWVyX2lkGAMgASgJEicKCmdhbWVfc3RhdGUYBCABKAsyEy5jb25uZWN0NC5HYW1lU3RhdGUqUAoKR2FtZVN0YXR1cxIXChNXQUlUSU5HX0ZPUl9QTEFZRVJTEAASDwoLSU5fUFJPR1JFU1MQARIMCghGSU5JU0hFRBACEgoKBlBBVVNFRBADMs8CCg9Db25uZWN0NFNlcnZpY2USOAoHR2V0R2FtZRIYLmNvbm5lY3Q0LkdldEdhbWVSZXF1ZXN0GhMuY29ubmVjdDQuR2FtZVN0YXRlEk4KCURyb3BQaWVjZRIaLmNvbm5lY3Q0LkRyb3BQaWVjZVJlcXVlc3QaGy5jb25uZWN0NC5Ecm9wUGllY2VSZXNwb25zZSIIsrUYBAgBEAESQQoISm9pbkdhbWUSGS5jb25uZWN0NC5Kb2luR2FtZVJlcXVlc3QaGi5jb25uZWN0NC5Kb2luR2FtZVJlc3BvbnNlEkcKCkNyZWF0ZUdhbWUSGy5jb25uZWN0NC5DcmVhdGVHYW1lUmVxdWVzdBocLmNvbm5lY3Q0LkNyZWF0ZUdhbWVSZXNwb25zZRomorUYCGNvbm5lY3Q0qrUYFggBEhJjb25uZWN0NC5HYW1lU3RhdGVCowEKDGNvbS5jb25uZWN0NEIJR2FtZVByb3RvUAFaSGdpdGh1Yi5jb20vcGFueWFtL3Byb3RvYy1nZW4tZ28td2FzbWpzL2V4YW1wbGVzL2Nvbm5lY3Q0L2dlbi9nby9jb25uZWN0NKICA0NYWKoCCENvbm5lY3Q0ygIIQ29ubmVjdDTiAhRDb25uZWN0NFxHUEJNZXRhZGF0YeoCCENvbm5lY3Q0YgZwcm90bzM", [file_wasmjs_v1_annotations, file_wasmjs_v1_patches]);

/**
 * @generated from message connect4.GameState
 */
export type GameState = Message<"connect4.GameState"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: connect4.GameConfig config = 2;
   */
  config?: GameConfig;

  /**
   * @generated from field: repeated connect4.Player players = 3;
   */
  players: Player[];

  /**
   * @generated from field: connect4.GameBoard board = 4;
   */
  board?: GameBoard;

  /**
   * @generated from field: string current_player_id = 5;
   */
  currentPlayerId: string;

  /**
   * @generated from field: int32 turn_number = 6;
   */
  turnNumber: number;

  /**
   * @generated from field: connect4.GameStatus status = 7;
   */
  status: GameStatus;

  /**
   * Player IDs who achieved connect-4
   *
   * @generated from field: repeated string winners = 8;
   */
  winners: string[];

  /**
   * @generated from field: map<string, connect4.PlayerStats> player_stats = 9;
   */
  playerStats: { [key: string]: PlayerStats };

  /**
   * @generated from field: int64 last_move_time = 10;
   */
  lastMoveTime: bigint;

  /**
   * Auto-skip after timeout
   *
   * @generated from field: int32 move_timeout_seconds = 11;
   */
  moveTimeoutSeconds: number;
};

/**
 * Describes the message connect4.GameState.
 * Use `create(GameStateSchema)` to create a new message.
 */
export const GameStateSchema: GenMessage<GameState> = /*@__PURE__*/
  messageDesc(file_connect4_game, 0);

/**
 * @generated from message connect4.GameConfig
 */
export type GameConfig = Message<"connect4.GameConfig"> & {
  /**
   * 7-20
   *
   * @generated from field: int32 board_width = 1;
   */
  boardWidth: number;

  /**
   * 6-20  
   *
   * @generated from field: int32 board_height = 2;
   */
  boardHeight: number;

  /**
   * 2-10
   *
   * @generated from field: int32 min_players = 3;
   */
  minPlayers: number;

  /**
   * 2-10
   *
   * @generated from field: int32 max_players = 4;
   */
  maxPlayers: number;

  /**
   * Usually 4, could be 3-6
   *
   * @generated from field: int32 connect_length = 5;
   */
  connectLength: number;

  /**
   * @generated from field: bool allow_multiple_winners = 6;
   */
  allowMultipleWinners: boolean;

  /**
   * 0 = no timeout
   *
   * @generated from field: int32 move_timeout_seconds = 7;
   */
  moveTimeoutSeconds: number;
};

/**
 * Describes the message connect4.GameConfig.
 * Use `create(GameConfigSchema)` to create a new message.
 */
export const GameConfigSchema: GenMessage<GameConfig> = /*@__PURE__*/
  messageDesc(file_connect4_game, 1);

/**
 * @generated from message connect4.Player
 */
export type Player = Message<"connect4.Player"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * hex color
   *
   * @generated from field: string color = 3;
   */
  color: string;

  /**
   * @generated from field: bool is_connected = 4;
   */
  isConnected: boolean;

  /**
   * Determines turn order
   *
   * @generated from field: int32 join_order = 5;
   */
  joinOrder: number;
};

/**
 * Describes the message connect4.Player.
 * Use `create(PlayerSchema)` to create a new message.
 */
export const PlayerSchema: GenMessage<Player> = /*@__PURE__*/
  messageDesc(file_connect4_game, 2);

/**
 * @generated from message connect4.GameBoard
 */
export type GameBoard = Message<"connect4.GameBoard"> & {
  /**
   * @generated from field: int32 width = 1;
   */
  width: number;

  /**
   * @generated from field: int32 height = 2;
   */
  height: number;

  /**
   * Board representation: grid[y][x] = player_id (empty = "")
   *
   * @generated from field: repeated connect4.BoardRow rows = 3;
   */
  rows: BoardRow[];

  /**
   * How many pieces in each column
   *
   * @generated from field: repeated int32 column_heights = 4;
   */
  columnHeights: number[];
};

/**
 * Describes the message connect4.GameBoard.
 * Use `create(GameBoardSchema)` to create a new message.
 */
export const GameBoardSchema: GenMessage<GameBoard> = /*@__PURE__*/
  messageDesc(file_connect4_game, 3);

/**
 * @generated from message connect4.BoardRow
 */
export type BoardRow = Message<"connect4.BoardRow"> & {
  /**
   * player_id in each cell, "" = empty
   *
   * @generated from field: repeated string cells = 1;
   */
  cells: string[];
};

/**
 * Describes the message connect4.BoardRow.
 * Use `create(BoardRowSchema)` to create a new message.
 */
export const BoardRowSchema: GenMessage<BoardRow> = /*@__PURE__*/
  messageDesc(file_connect4_game, 4);

/**
 * @generated from message connect4.PlayerStats
 */
export type PlayerStats = Message<"connect4.PlayerStats"> & {
  /**
   * @generated from field: int32 pieces_played = 1;
   */
  piecesPlayed: number;

  /**
   * Number of connect-4s achieved
   *
   * @generated from field: int32 winning_lines = 2;
   */
  winningLines: number;

  /**
   * @generated from field: bool has_won = 3;
   */
  hasWon: boolean;

  /**
   * Milliseconds
   *
   * @generated from field: int64 total_move_time = 4;
   */
  totalMoveTime: bigint;
};

/**
 * Describes the message connect4.PlayerStats.
 * Use `create(PlayerStatsSchema)` to create a new message.
 */
export const PlayerStatsSchema: GenMessage<PlayerStats> = /*@__PURE__*/
  messageDesc(file_connect4_game, 5);

/**
 * Request/Response messages
 *
 * @generated from message connect4.GetGameRequest
 */
export type GetGameRequest = Message<"connect4.GetGameRequest"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;
};

/**
 * Describes the message connect4.GetGameRequest.
 * Use `create(GetGameRequestSchema)` to create a new message.
 */
export const GetGameRequestSchema: GenMessage<GetGameRequest> = /*@__PURE__*/
  messageDesc(file_connect4_game, 6);

/**
 * @generated from message connect4.DropPieceRequest
 */
export type DropPieceRequest = Message<"connect4.DropPieceRequest"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: string player_id = 2;
   */
  playerId: string;

  /**
   * @generated from field: int32 column = 3;
   */
  column: number;
};

/**
 * Describes the message connect4.DropPieceRequest.
 * Use `create(DropPieceRequestSchema)` to create a new message.
 */
export const DropPieceRequestSchema: GenMessage<DropPieceRequest> = /*@__PURE__*/
  messageDesc(file_connect4_game, 7);

/**
 * @generated from message connect4.DropPieceResponse
 */
export type DropPieceResponse = Message<"connect4.DropPieceResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * @generated from field: repeated wasmjs.v1.MessagePatch patches = 3;
   */
  patches: MessagePatch[];

  /**
   * @generated from field: int64 change_number = 4;
   */
  changeNumber: bigint;

  /**
   * @generated from field: connect4.PieceDropResult result = 5;
   */
  result?: PieceDropResult;
};

/**
 * Describes the message connect4.DropPieceResponse.
 * Use `create(DropPieceResponseSchema)` to create a new message.
 */
export const DropPieceResponseSchema: GenMessage<DropPieceResponse> = /*@__PURE__*/
  messageDesc(file_connect4_game, 8);

/**
 * @generated from message connect4.PieceDropResult
 */
export type PieceDropResult = Message<"connect4.PieceDropResult"> & {
  /**
   * Where the piece landed
   *
   * @generated from field: int32 final_row = 1;
   */
  finalRow: number;

  /**
   * @generated from field: int32 final_column = 2;
   */
  finalColumn: number;

  /**
   * Did this move create a connect-4?
   *
   * @generated from field: bool formed_line = 3;
   */
  formedLine: boolean;

  /**
   * Details of any lines formed
   *
   * @generated from field: repeated connect4.LineInfo winning_lines = 4;
   */
  winningLines: LineInfo[];
};

/**
 * Describes the message connect4.PieceDropResult.
 * Use `create(PieceDropResultSchema)` to create a new message.
 */
export const PieceDropResultSchema: GenMessage<PieceDropResult> = /*@__PURE__*/
  messageDesc(file_connect4_game, 9);

/**
 * @generated from message connect4.LineInfo
 */
export type LineInfo = Message<"connect4.LineInfo"> & {
  /**
   * @generated from field: repeated connect4.Position positions = 1;
   */
  positions: Position[];

  /**
   * "horizontal", "vertical", "diagonal_up", "diagonal_down"
   *
   * @generated from field: string direction = 2;
   */
  direction: string;

  /**
   * @generated from field: int32 length = 3;
   */
  length: number;
};

/**
 * Describes the message connect4.LineInfo.
 * Use `create(LineInfoSchema)` to create a new message.
 */
export const LineInfoSchema: GenMessage<LineInfo> = /*@__PURE__*/
  messageDesc(file_connect4_game, 10);

/**
 * @generated from message connect4.Position
 */
export type Position = Message<"connect4.Position"> & {
  /**
   * @generated from field: int32 row = 1;
   */
  row: number;

  /**
   * @generated from field: int32 column = 2;
   */
  column: number;
};

/**
 * Describes the message connect4.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export const PositionSchema: GenMessage<Position> = /*@__PURE__*/
  messageDesc(file_connect4_game, 11);

/**
 * @generated from message connect4.JoinGameRequest
 */
export type JoinGameRequest = Message<"connect4.JoinGameRequest"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: string player_name = 2;
   */
  playerName: string;

  /**
   * Optional color preference
   *
   * @generated from field: string preferred_color = 3;
   */
  preferredColor: string;
};

/**
 * Describes the message connect4.JoinGameRequest.
 * Use `create(JoinGameRequestSchema)` to create a new message.
 */
export const JoinGameRequestSchema: GenMessage<JoinGameRequest> = /*@__PURE__*/
  messageDesc(file_connect4_game, 12);

/**
 * @generated from message connect4.JoinGameResponse
 */
export type JoinGameResponse = Message<"connect4.JoinGameResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId: string;

  /**
   * @generated from field: string assigned_color = 4;
   */
  assignedColor: string;

  /**
   * @generated from field: connect4.GameState game_state = 5;
   */
  gameState?: GameState;
};

/**
 * Describes the message connect4.JoinGameResponse.
 * Use `create(JoinGameResponseSchema)` to create a new message.
 */
export const JoinGameResponseSchema: GenMessage<JoinGameResponse> = /*@__PURE__*/
  messageDesc(file_connect4_game, 13);

/**
 * @generated from message connect4.CreateGameRequest
 */
export type CreateGameRequest = Message<"connect4.CreateGameRequest"> & {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId: string;

  /**
   * @generated from field: connect4.GameConfig config = 2;
   */
  config?: GameConfig;

  /**
   * @generated from field: string creator_name = 3;
   */
  creatorName: string;
};

/**
 * Describes the message connect4.CreateGameRequest.
 * Use `create(CreateGameRequestSchema)` to create a new message.
 */
export const CreateGameRequestSchema: GenMessage<CreateGameRequest> = /*@__PURE__*/
  messageDesc(file_connect4_game, 14);

/**
 * @generated from message connect4.CreateGameResponse
 */
export type CreateGameResponse = Message<"connect4.CreateGameResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId: string;

  /**
   * @generated from field: connect4.GameState game_state = 4;
   */
  gameState?: GameState;
};

/**
 * Describes the message connect4.CreateGameResponse.
 * Use `create(CreateGameResponseSchema)` to create a new message.
 */
export const CreateGameResponseSchema: GenMessage<CreateGameResponse> = /*@__PURE__*/
  messageDesc(file_connect4_game, 15);

/**
 * @generated from enum connect4.GameStatus
 */
export enum GameStatus {
  /**
   * @generated from enum value: WAITING_FOR_PLAYERS = 0;
   */
  WAITING_FOR_PLAYERS = 0,

  /**
   * @generated from enum value: IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: FINISHED = 2;
   */
  FINISHED = 2,

  /**
   * @generated from enum value: PAUSED = 3;
   */
  PAUSED = 3,
}

/**
 * Describes the enum connect4.GameStatus.
 */
export const GameStatusSchema: GenEnum<GameStatus> = /*@__PURE__*/
  enumDesc(file_connect4_game, 0);

/**
 * @generated from service connect4.Connect4Service
 */
export const Connect4Service: GenService<{
  /**
   * Get current game state
   *
   * @generated from rpc connect4.Connect4Service.GetGame
   */
  getGame: {
    methodKind: "unary";
    input: typeof GetGameRequestSchema;
    output: typeof GameStateSchema;
  },
  /**
   * Drop a piece in a column - returns patches for real-time updates
   *
   * @generated from rpc connect4.Connect4Service.DropPiece
   */
  dropPiece: {
    methodKind: "unary";
    input: typeof DropPieceRequestSchema;
    output: typeof DropPieceResponseSchema;
  },
  /**
   * Join game as a player
   *
   * @generated from rpc connect4.Connect4Service.JoinGame
   */
  joinGame: {
    methodKind: "unary";
    input: typeof JoinGameRequestSchema;
    output: typeof JoinGameResponseSchema;
  },
  /**
   * Create a new game with custom settings
   *
   * @generated from rpc connect4.Connect4Service.CreateGame
   */
  createGame: {
    methodKind: "unary";
    input: typeof CreateGameRequestSchema;
    output: typeof CreateGameResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_connect4_game, 0);

