syntax = "proto3";

package connect4;

import "wasmjs/v1/annotations.proto";
import "wasmjs/v1/patches.proto";

option go_package = "github.com/panyam/protoc-gen-go-wasmjs/examples/connect4/proto/connect4";

enum GameStatus {
  GAME_STATUS_UNSPECIFIED = 0;
  GAME_STATUS_WAITING_FOR_PLAYERS = 1;
  GAME_STATUS_IN_PROGRESS = 2;
  GAME_STATUS_FINISHED = 3;
  GAME_STATUS_PAUSED = 4;
}

message GameState {
  string game_id = 1;
  GameConfig config = 2;
  repeated Player players = 3;
  GameBoard board = 4;
  string current_player_id = 5;
  int32 turn_number = 6;
  GameStatus status = 7;
  repeated string winners = 8; // Player IDs who achieved connect-4
  map<string, PlayerStats> player_stats = 9;
  int64 last_move_time = 10;
  int32 move_timeout_seconds = 11; // Auto-skip after timeout
}

service Connect4Service {
  option (wasmjs.v1.wasm_service_name) = "connect4";
  option (wasmjs.v1.stateful) = {
    enabled: true
    state_message_type: "connect4.GameState"
    conflict_resolution: CHANGE_NUMBER_BASED
  };

  // Get current game state
  rpc GetGame(GetGameRequest) returns (GameState);
  
  // Drop a piece in a column - returns patches for real-time updates
  rpc DropPiece(DropPieceRequest) returns (DropPieceResponse) {
    option (wasmjs.v1.stateful_method) = {
      returns_patches: true
      broadcasts: true
    };
  };
  
  // Join game as a player
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse);
  
  // Create a new game with custom settings
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse);
}

message GameConfig {
  int32 board_width = 1;   // 7-20
  int32 board_height = 2;  // 6-20  
  int32 min_players = 3;   // 2-10
  int32 max_players = 4;   // 2-10
  int32 connect_length = 5; // Usually 4, could be 3-6
  bool allow_multiple_winners = 6;
  int32 move_timeout_seconds = 7; // 0 = no timeout
}

message Player {
  string id = 1;
  string name = 2;
  string color = 3;      // hex color
  bool is_connected = 4;
  int32 join_order = 5;  // Determines turn order
}

message GameBoard {
  int32 width = 1;
  int32 height = 2;
  // Board representation: grid[y][x] = player_id (empty = "")
  repeated BoardRow rows = 3;
  repeated int32 column_heights = 4; // How many pieces in each column
}

message BoardRow {
  repeated string cells = 1; // player_id in each cell, "" = empty
}

message PlayerStats {
  int32 pieces_played = 1;
  int32 winning_lines = 2; // Number of connect-4s achieved
  bool has_won = 3;
  int64 total_move_time = 4; // Milliseconds
}

// Request/Response messages
message GetGameRequest {
  string game_id = 1;
}

message DropPieceRequest {
  string game_id = 1;
  string player_id = 2;
  int32 column = 3;
}

message DropPieceResponse {
  bool success = 1;
  string error_message = 2;
  // repeated wasmjs.v1.MessagePatch patches = 3;
  int64 change_number = 4;
  PieceDropResult result = 5;
}

message PieceDropResult {
  int32 final_row = 1;    // Where the piece landed
  int32 final_column = 2;
  bool formed_line = 3;   // Did this move create a connect-4?
  repeated LineInfo winning_lines = 4; // Details of any lines formed
}

message LineInfo {
  repeated Position positions = 1;
  string direction = 2; // "horizontal", "vertical", "diagonal_up", "diagonal_down"
  int32 length = 3;
}

message Position {
  int32 row = 1;
  int32 column = 2;
}

message JoinGameRequest {
  string game_id = 1;
  string player_name = 2;
  string preferred_color = 3; // Optional color preference
}

message JoinGameResponse {
  bool success = 1;
  string error_message = 2;
  string player_id = 3;
  string assigned_color = 4;
  GameState game_state = 5;
}

message CreateGameRequest {
  string game_id = 1;
  GameConfig config = 2;
  string creator_name = 3;
}

message CreateGameResponse {
  bool success = 1;
  string error_message = 2;
  string player_id = 3;
  GameState game_state = 4;
}
