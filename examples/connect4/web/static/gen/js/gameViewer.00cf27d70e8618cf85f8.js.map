{"version":3,"file":"gameViewer.00cf27d70e8618cf85f8.js","mappings":"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","sources":["webpack://connect4Pages/webpack/universalModuleDefinition","webpack://connect4Pages/webpack/bootstrap","webpack://connect4Pages/webpack/runtime/define property getters","webpack://connect4Pages/webpack/runtime/hasOwnProperty shorthand","webpack://connect4Pages/webpack/runtime/make namespace object","webpack://connect4Pages/./gen/wasmts/multiplayer_connect4Client.client.ts","webpack://connect4Pages/./gen/wasmts/connect4/deserializer_schemas.ts","webpack://connect4Pages/./gen/wasmts/connect4/schemas.ts","webpack://connect4Pages/./gen/wasmts/connect4/deserializer.ts","webpack://connect4Pages/./gen/wasmts/connect4/factory.ts","webpack://connect4Pages/./gen/wasmts/connect4/models.ts","webpack://connect4Pages/./src/gameViewer.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"connect4Pages\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"connect4Pages\"] = factory();\n\telse\n\t\troot[\"connect4Pages\"] = root[\"connect4Pages\"] || {}, root[\"connect4Pages\"][\"gameViewer\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.\n// source: connect4/game.proto\n\n/**\n * WASM Response interface for all service calls\n */\nexport interface WASMResponse<T = any> {\n    success: boolean;\n    message: string;\n    data: T;\n}\n\n/**\n * Error class for WASM-specific errors\n */\nexport class WasmError extends Error {\n    constructor(message: string, public readonly methodPath?: string) {\n        super(message);\n        this.name = 'WasmError';\n    }\n}\n/**\n * Connect4Service service client interface\n * Uses any types since we generate our own TypeScript interfaces\n */\nexport interface Connect4ServiceMethods {\n\tgetGame(request: any): Promise<any>;\n\tdropPiece(request: any): Promise<any>;\n\tjoinGame(request: any): Promise<any>;\n\tcreateGame(request: any): Promise<any>;\n}\n\n/**\n * multiplayer_connect4 WASM client\n * Provides a clean interface between UI components and the Go WASM service implementations\n */\nexport class Multiplayer_connect4Client {\n    private wasm: any;\n    private wasmLoadPromise: Promise<void> | null = null;\n\n    // Service-specific clients\n    public readonly connect4Service: Connect4ServiceClientImpl;\n\n    constructor() {\n        this.connect4Service = new Connect4ServiceClientImpl(this);\n    }\n\n    /**\n     * Load the WASM module asynchronously\n     */\n    public async loadWasm(wasmPath: string = './multiplayer_connect4.wasm'): Promise<void> {\n        if (this.wasmLoadPromise) {\n            return this.wasmLoadPromise;\n        }\n\n        this.wasmLoadPromise = this.loadWASMModule(wasmPath);\n        return this.wasmLoadPromise;\n    }\n\n    /**\n     * Check if WASM is ready for operations\n     */\n    public isReady(): boolean {\n        return this.wasm !== null && this.wasm !== undefined;\n    }\n\n    /**\n     * Wait for WASM to be ready (use during initialization)\n     */\n    public async waitUntilReady(): Promise<void> {\n        if (!this.wasmLoadPromise) {\n            throw new Error('WASM loading not started. Call loadWasm() first.');\n        }\n        await this.wasmLoadPromise;\n    }\n\n    /**\n     * Internal method to call WASM functions with JSON conversion\n     */\n    public callMethod<TRequest, TResponse>(\n        methodPath: string,\n        request: TRequest\n    ): Promise<TResponse> {\n        this.ensureWASMLoaded();\n\n        try {\n            // Convert request to JSON\n            const jsonReq = JSON.parse(JSON.stringify(request));\n            const wasmMethod = this.getWasmMethod(methodPath);\n            const wasmResponse = wasmMethod(JSON.stringify(jsonReq));\n\n            if (!wasmResponse.success) {\n                throw new WasmError(wasmResponse.message, methodPath);\n            }\n\n            // Return response data directly\n            return wasmResponse.data;\n        } catch (error) {\n            if (error instanceof WasmError) {\n                throw error;\n            }\n            throw new WasmError(\n                `Call error: ${error instanceof Error ? error.message : String(error)}`,\n                methodPath\n            );\n        }\n    }\n\n    /**\n     * Load the WASM module implementation\n     */\n    private async loadWASMModule(wasmPath: string): Promise<void> {\n        console.log('Loading multiplayer_connect4 WASM module...');\n\n        // Check if WASM is already loaded (for testing environments)\n        if ((window as any).multiplayerConnect4) {\n            console.log('WASM module already loaded (pre-loaded in test environment)');\n            this.wasm = (window as any).multiplayerConnect4;\n            return;\n        }\n\n        // Load Go's WASM support\n        if (!(window as any).Go) {\n            const script = document.createElement('script');\n            script.src = '/static/wasm/wasm_exec.js';\n            document.head.appendChild(script);\n\n            await new Promise<void>((resolve, reject) => {\n                script.onload = () => resolve();\n                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));\n            });\n        }\n\n        // Initialize Go WASM runtime\n        const go = new (window as any).Go();\n        const wasmModule = await WebAssembly.instantiateStreaming(\n            fetch(wasmPath),\n            go.importObject\n        );\n\n        // Run the WASM module\n        go.run(wasmModule.instance);\n\n        // Verify WASM APIs are available\n        if (!(window as any).multiplayerConnect4) {\n            throw new Error('WASM APIs not found - module may not have loaded correctly');\n        }\n        this.wasm = (window as any).multiplayerConnect4;\n\n        console.log('multiplayer_connect4 WASM module loaded successfully');\n    }\n\n    /**\n     * Ensure WASM module is loaded (synchronous version for service calls)\n     */\n    private ensureWASMLoaded(): void {\n        if (!this.isReady()) {\n            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');\n        }\n    }\n\n    /**\n     * Get WASM method function by path\n     */\n    private getWasmMethod(methodPath: string): Function {\n        // Handle namespaced structure: namespace.service.method\n        const parts = methodPath.split('.');\n        let current = this.wasm;\n        for (const part of parts) {\n            current = current[part];\n            if (!current) {\n                throw new Error(`Method not found: ${methodPath}`);\n            }\n        }\n        return current;\n    }\n}\n/**\n * Connect4Service service client implementation\n */\nclass Connect4ServiceClientImpl implements Connect4ServiceMethods {\n    constructor(private parent: Multiplayer_connect4Client) {}\n    async getGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.getGame', request);\n    }\n    async dropPiece(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.dropPiece', request);\n    }\n    async joinGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.joinGame', request);\n    }\n    async createGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.createGame', request);\n    }\n}\n\n// Export the main client class\nexport default Multiplayer_connect4Client;","\n// Generated TypeScript schema framework types\n// DO NOT EDIT - This file is auto-generated\n\n/**\n * Field type enumeration for proto field types\n */\nexport enum FieldType {\n  STRING = \"string\",\n  NUMBER = \"number\", \n  BOOLEAN = \"boolean\",\n  MESSAGE = \"message\",\n  REPEATED = \"repeated\",\n  MAP = \"map\",\n  ONEOF = \"oneof\"\n}\n\n/**\n * Schema interface for field definitions\n */\nexport interface FieldSchema {\n  name: string;\n  type: FieldType;\n  id: number; // Proto field number (e.g., text_query = 1)\n  messageType?: string; // For MESSAGE type fields\n  repeated?: boolean; // For array fields\n  mapKeyType?: FieldType; // For MAP type fields\n  mapValueType?: FieldType | string; // For MAP type fields\n  oneofGroup?: string; // For ONEOF fields\n  optional?: boolean;\n}\n\n/**\n * Message schema interface\n */\nexport interface MessageSchema {\n  name: string;\n  fields: FieldSchema[];\n  oneofGroups?: string[]; // List of oneof group names\n}","\n// Generated TypeScript schemas from proto file\n// DO NOT EDIT - This file is auto-generated\n\nimport { FieldType, FieldSchema, MessageSchema } from \"./deserializer_schemas\";\n\n\n/**\n * Schema for GameState message\n */\nexport const GameStateSchema: MessageSchema = {\n  name: \"GameState\",\n  fields: [\n    {\n      name: \"gameId\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n    {\n      name: \"config\",\n      type: FieldType.MESSAGE,\n      id: 2,\n      messageType: \"connect4.GameConfig\",\n    },\n    {\n      name: \"players\",\n      type: FieldType.MESSAGE,\n      id: 3,\n      messageType: \"connect4.Player\",\n      repeated: true,\n    },\n    {\n      name: \"board\",\n      type: FieldType.MESSAGE,\n      id: 4,\n      messageType: \"connect4.GameBoard\",\n    },\n    {\n      name: \"currentPlayerId\",\n      type: FieldType.STRING,\n      id: 5,\n    },\n    {\n      name: \"turnNumber\",\n      type: FieldType.NUMBER,\n      id: 6,\n    },\n    {\n      name: \"status\",\n      type: FieldType.STRING,\n      id: 7,\n    },\n    {\n      name: \"winners\",\n      type: FieldType.REPEATED,\n      id: 8,\n      repeated: true,\n    },\n    {\n      name: \"playerStats\",\n      type: FieldType.MESSAGE,\n      id: 9,\n      messageType: \"connect4.PlayerStatsEntry\",\n    },\n    {\n      name: \"lastMoveTime\",\n      type: FieldType.NUMBER,\n      id: 10,\n    },\n    {\n      name: \"moveTimeoutSeconds\",\n      type: FieldType.NUMBER,\n      id: 11,\n    },\n  ],\n};\n\n\n/**\n * Schema for GameConfig message\n */\nexport const GameConfigSchema: MessageSchema = {\n  name: \"GameConfig\",\n  fields: [\n    {\n      name: \"boardWidth\",\n      type: FieldType.NUMBER,\n      id: 1,\n    },\n    {\n      name: \"boardHeight\",\n      type: FieldType.NUMBER,\n      id: 2,\n    },\n    {\n      name: \"minPlayers\",\n      type: FieldType.NUMBER,\n      id: 3,\n    },\n    {\n      name: \"maxPlayers\",\n      type: FieldType.NUMBER,\n      id: 4,\n    },\n    {\n      name: \"connectLength\",\n      type: FieldType.NUMBER,\n      id: 5,\n    },\n    {\n      name: \"allowMultipleWinners\",\n      type: FieldType.BOOLEAN,\n      id: 6,\n    },\n    {\n      name: \"moveTimeoutSeconds\",\n      type: FieldType.NUMBER,\n      id: 7,\n    },\n  ],\n};\n\n\n/**\n * Schema for Player message\n */\nexport const PlayerSchema: MessageSchema = {\n  name: \"Player\",\n  fields: [\n    {\n      name: \"id\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n    {\n      name: \"name\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"color\",\n      type: FieldType.STRING,\n      id: 3,\n    },\n    {\n      name: \"isConnected\",\n      type: FieldType.BOOLEAN,\n      id: 4,\n    },\n    {\n      name: \"joinOrder\",\n      type: FieldType.NUMBER,\n      id: 5,\n    },\n  ],\n};\n\n\n/**\n * Schema for GameBoard message\n */\nexport const GameBoardSchema: MessageSchema = {\n  name: \"GameBoard\",\n  fields: [\n    {\n      name: \"width\",\n      type: FieldType.NUMBER,\n      id: 1,\n    },\n    {\n      name: \"height\",\n      type: FieldType.NUMBER,\n      id: 2,\n    },\n    {\n      name: \"rows\",\n      type: FieldType.MESSAGE,\n      id: 3,\n      messageType: \"connect4.BoardRow\",\n      repeated: true,\n    },\n    {\n      name: \"columnHeights\",\n      type: FieldType.REPEATED,\n      id: 4,\n      repeated: true,\n    },\n  ],\n};\n\n\n/**\n * Schema for BoardRow message\n */\nexport const BoardRowSchema: MessageSchema = {\n  name: \"BoardRow\",\n  fields: [\n    {\n      name: \"cells\",\n      type: FieldType.REPEATED,\n      id: 1,\n      repeated: true,\n    },\n  ],\n};\n\n\n/**\n * Schema for PlayerStats message\n */\nexport const PlayerStatsSchema: MessageSchema = {\n  name: \"PlayerStats\",\n  fields: [\n    {\n      name: \"piecesPlayed\",\n      type: FieldType.NUMBER,\n      id: 1,\n    },\n    {\n      name: \"winningLines\",\n      type: FieldType.NUMBER,\n      id: 2,\n    },\n    {\n      name: \"hasWon\",\n      type: FieldType.BOOLEAN,\n      id: 3,\n    },\n    {\n      name: \"totalMoveTime\",\n      type: FieldType.NUMBER,\n      id: 4,\n    },\n  ],\n};\n\n\n/**\n * Schema for GetGameRequest message\n */\nexport const GetGameRequestSchema: MessageSchema = {\n  name: \"GetGameRequest\",\n  fields: [\n    {\n      name: \"gameId\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n  ],\n};\n\n\n/**\n * Schema for DropPieceRequest message\n */\nexport const DropPieceRequestSchema: MessageSchema = {\n  name: \"DropPieceRequest\",\n  fields: [\n    {\n      name: \"gameId\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n    {\n      name: \"playerId\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"column\",\n      type: FieldType.NUMBER,\n      id: 3,\n    },\n  ],\n};\n\n\n/**\n * Schema for DropPieceResponse message\n */\nexport const DropPieceResponseSchema: MessageSchema = {\n  name: \"DropPieceResponse\",\n  fields: [\n    {\n      name: \"success\",\n      type: FieldType.BOOLEAN,\n      id: 1,\n    },\n    {\n      name: \"errorMessage\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"changeNumber\",\n      type: FieldType.NUMBER,\n      id: 4,\n    },\n    {\n      name: \"result\",\n      type: FieldType.MESSAGE,\n      id: 5,\n      messageType: \"connect4.PieceDropResult\",\n    },\n  ],\n};\n\n\n/**\n * Schema for PieceDropResult message\n */\nexport const PieceDropResultSchema: MessageSchema = {\n  name: \"PieceDropResult\",\n  fields: [\n    {\n      name: \"finalRow\",\n      type: FieldType.NUMBER,\n      id: 1,\n    },\n    {\n      name: \"finalColumn\",\n      type: FieldType.NUMBER,\n      id: 2,\n    },\n    {\n      name: \"formedLine\",\n      type: FieldType.BOOLEAN,\n      id: 3,\n    },\n    {\n      name: \"winningLines\",\n      type: FieldType.MESSAGE,\n      id: 4,\n      messageType: \"connect4.LineInfo\",\n      repeated: true,\n    },\n  ],\n};\n\n\n/**\n * Schema for LineInfo message\n */\nexport const LineInfoSchema: MessageSchema = {\n  name: \"LineInfo\",\n  fields: [\n    {\n      name: \"positions\",\n      type: FieldType.MESSAGE,\n      id: 1,\n      messageType: \"connect4.Position\",\n      repeated: true,\n    },\n    {\n      name: \"direction\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"length\",\n      type: FieldType.NUMBER,\n      id: 3,\n    },\n  ],\n};\n\n\n/**\n * Schema for Position message\n */\nexport const PositionSchema: MessageSchema = {\n  name: \"Position\",\n  fields: [\n    {\n      name: \"row\",\n      type: FieldType.NUMBER,\n      id: 1,\n    },\n    {\n      name: \"column\",\n      type: FieldType.NUMBER,\n      id: 2,\n    },\n  ],\n};\n\n\n/**\n * Schema for JoinGameRequest message\n */\nexport const JoinGameRequestSchema: MessageSchema = {\n  name: \"JoinGameRequest\",\n  fields: [\n    {\n      name: \"gameId\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n    {\n      name: \"playerName\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"preferredColor\",\n      type: FieldType.STRING,\n      id: 3,\n    },\n  ],\n};\n\n\n/**\n * Schema for JoinGameResponse message\n */\nexport const JoinGameResponseSchema: MessageSchema = {\n  name: \"JoinGameResponse\",\n  fields: [\n    {\n      name: \"success\",\n      type: FieldType.BOOLEAN,\n      id: 1,\n    },\n    {\n      name: \"errorMessage\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"playerId\",\n      type: FieldType.STRING,\n      id: 3,\n    },\n    {\n      name: \"assignedColor\",\n      type: FieldType.STRING,\n      id: 4,\n    },\n    {\n      name: \"gameState\",\n      type: FieldType.MESSAGE,\n      id: 5,\n      messageType: \"connect4.GameState\",\n    },\n  ],\n};\n\n\n/**\n * Schema for CreateGameRequest message\n */\nexport const CreateGameRequestSchema: MessageSchema = {\n  name: \"CreateGameRequest\",\n  fields: [\n    {\n      name: \"gameId\",\n      type: FieldType.STRING,\n      id: 1,\n    },\n    {\n      name: \"config\",\n      type: FieldType.MESSAGE,\n      id: 2,\n      messageType: \"connect4.GameConfig\",\n    },\n    {\n      name: \"creatorName\",\n      type: FieldType.STRING,\n      id: 3,\n    },\n  ],\n};\n\n\n/**\n * Schema for CreateGameResponse message\n */\nexport const CreateGameResponseSchema: MessageSchema = {\n  name: \"CreateGameResponse\",\n  fields: [\n    {\n      name: \"success\",\n      type: FieldType.BOOLEAN,\n      id: 1,\n    },\n    {\n      name: \"errorMessage\",\n      type: FieldType.STRING,\n      id: 2,\n    },\n    {\n      name: \"playerId\",\n      type: FieldType.STRING,\n      id: 3,\n    },\n    {\n      name: \"gameState\",\n      type: FieldType.MESSAGE,\n      id: 4,\n      messageType: \"connect4.GameState\",\n    },\n  ],\n};\n\n\n\n/**\n * Package-scoped schema registry for connect4\n */\nexport const Connect4SchemaRegistry: Record<string, MessageSchema> = {\n  \"connect4.GameState\": GameStateSchema,\n  \"connect4.GameConfig\": GameConfigSchema,\n  \"connect4.Player\": PlayerSchema,\n  \"connect4.GameBoard\": GameBoardSchema,\n  \"connect4.BoardRow\": BoardRowSchema,\n  \"connect4.PlayerStats\": PlayerStatsSchema,\n  \"connect4.GetGameRequest\": GetGameRequestSchema,\n  \"connect4.DropPieceRequest\": DropPieceRequestSchema,\n  \"connect4.DropPieceResponse\": DropPieceResponseSchema,\n  \"connect4.PieceDropResult\": PieceDropResultSchema,\n  \"connect4.LineInfo\": LineInfoSchema,\n  \"connect4.Position\": PositionSchema,\n  \"connect4.JoinGameRequest\": JoinGameRequestSchema,\n  \"connect4.JoinGameResponse\": JoinGameResponseSchema,\n  \"connect4.CreateGameRequest\": CreateGameRequestSchema,\n  \"connect4.CreateGameResponse\": CreateGameResponseSchema,\n};\n\n/**\n * Get schema for a message type from connect4 package\n */\nexport function getSchema(messageType: string): MessageSchema | undefined {\n  return Connect4SchemaRegistry[messageType];\n}\n\n/**\n * Get field schema by name from connect4 package\n */\nexport function getFieldSchema(messageType: string, fieldName: string): FieldSchema | undefined {\n  const schema = getSchema(messageType);\n  return schema?.fields.find(field => field.name === fieldName);\n}\n\n/**\n * Get field schema by proto field ID from connect4 package\n */\nexport function getFieldSchemaById(messageType: string, fieldId: number): FieldSchema | undefined {\n  const schema = getSchema(messageType);\n  return schema?.fields.find(field => field.id === fieldId);\n}\n\n/**\n * Check if field is part of a oneof group in connect4 package\n */\nexport function isOneofField(messageType: string, fieldName: string): boolean {\n  const fieldSchema = getFieldSchema(messageType, fieldName);\n  return fieldSchema?.oneofGroup !== undefined;\n}\n\n/**\n * Get all fields in a oneof group from connect4 package\n */\nexport function getOneofFields(messageType: string, oneofGroup: string): FieldSchema[] {\n  const schema = getSchema(messageType);\n  return schema?.fields.filter(field => field.oneofGroup === oneofGroup) || [];\n}","\n// Generated TypeScript schema-aware deserializer\n// DO NOT EDIT - This file is auto-generated\n\nimport { FieldType, FieldSchema, MessageSchema } from \"./deserializer_schemas\";\nimport { Connect4Factory } from \"./factory\";\nimport { Connect4SchemaRegistry } from \"./schemas\";\n\n// Shared factory instance to avoid creating new instances on every deserializer construction\nconst DEFAULT_FACTORY = new Connect4Factory();\n\n/**\n * Factory interface that deserializer expects\n */\nexport interface FactoryInterface {\n  /**\n   * Get factory method for a fully qualified message type\n   * This enables cross-package factory delegation\n   */\n  getFactoryMethod?(messageType: string): ((parent?: any, attributeName?: string, attributeKey?: string | number, data?: any) => FactoryResult<any>) | undefined;\n}\n\n/**\n * Factory result interface\n */\nexport interface FactoryResult<T> {\n  instance: T;\n  fullyLoaded: boolean;\n}\n\n/**\n * Schema-aware deserializer for connect4 package\n */\nexport class Connect4Deserializer {\n  constructor(\n    private schemaRegistry: Record<string, MessageSchema> = Connect4SchemaRegistry,\n    private factory: FactoryInterface = DEFAULT_FACTORY\n  ) {}\n\n  /**\n   * Deserialize an object using schema information\n   * @param instance The target instance to populate\n   * @param data The source data to deserialize from\n   * @param messageType The fully qualified message type (e.g., \"library.v1.Book\")\n   * @returns The populated instance\n   */\n  deserialize<T>(instance: T, data: any, messageType: string): T {\n    if (!data || typeof data !== 'object') {\n      return instance;\n    }\n\n    const schema = this.schemaRegistry[messageType];\n    if (!schema) {\n      // Fallback to simple property copying if no schema found\n      return this.fallbackDeserialize(instance, data);\n    }\n\n    // Process each field according to its schema\n    for (const fieldSchema of schema.fields) {\n      const fieldValue = data[fieldSchema.name];\n      if (fieldValue === null || fieldValue === undefined) {\n        continue;\n      }\n\n      this.deserializeField(instance, fieldSchema, fieldValue);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Deserialize a single field based on its schema\n   */\n  private deserializeField(instance: any, fieldSchema: FieldSchema, fieldValue: any): void {\n    const fieldName = fieldSchema.name;\n\n    switch (fieldSchema.type) {\n      case FieldType.STRING:\n      case FieldType.NUMBER:\n      case FieldType.BOOLEAN:\n        // Simple primitive types - direct assignment\n        instance[fieldName] = fieldValue;\n        break;\n\n      case FieldType.MESSAGE:\n        if (fieldSchema.repeated) {\n          // Handle repeated message fields (arrays)\n          instance[fieldName] = this.deserializeMessageArray(\n            fieldValue,\n            fieldSchema.messageType!,\n            instance,\n            fieldName\n          );\n        } else {\n          // Handle single message field\n          instance[fieldName] = this.deserializeMessageField(\n            fieldValue,\n            fieldSchema.messageType!,\n            instance,\n            fieldName\n          );\n        }\n        break;\n\n      case FieldType.REPEATED:\n        // Handle repeated primitive fields\n        if (Array.isArray(fieldValue)) {\n          instance[fieldName] = [...fieldValue]; // Simple copy for primitives\n        }\n        break;\n\n      case FieldType.ONEOF:\n        // Handle oneof fields (would need additional logic for union types)\n        instance[fieldName] = fieldValue;\n        break;\n\n      case FieldType.MAP:\n        // Handle map fields (would need additional schema info for key/value types)\n        instance[fieldName] = { ...fieldValue };\n        break;\n\n      default:\n        // Fallback to direct assignment\n        instance[fieldName] = fieldValue;\n        break;\n    }\n  }\n\n  /**\n   * Deserialize a single message field\n   */\n  private deserializeMessageField(\n    fieldValue: any,\n    messageType: string,\n    parent: any,\n    attributeName: string\n  ): any {\n    // Try to get factory method using cross-package delegation\n    let factoryMethod;\n    \n    if (this.factory.getFactoryMethod) {\n      factoryMethod = this.factory.getFactoryMethod(messageType);\n    } else {\n      // Fallback to simple method name lookup\n      const factoryMethodName = this.getFactoryMethodName(messageType);\n      factoryMethod = (this.factory as any)[factoryMethodName];\n    }\n\n    if (factoryMethod) {\n      const result = factoryMethod(parent, attributeName, undefined, fieldValue);\n      if (result.fullyLoaded) {\n        return result.instance;\n      } else {\n        // Factory created instance but didn't populate - use deserializer\n        return this.deserialize(result.instance, fieldValue, messageType);\n      }\n    }\n\n    // No factory method found - fallback\n    return this.fallbackDeserialize({}, fieldValue);\n  }\n\n  /**\n   * Deserialize an array of message objects\n   */\n  private deserializeMessageArray(\n    fieldValue: any[],\n    messageType: string,\n    parent: any,\n    attributeName: string\n  ): any[] {\n    if (!Array.isArray(fieldValue)) {\n      return [];\n    }\n\n    // Try to get factory method using cross-package delegation\n    let factoryMethod;\n    \n    if (this.factory.getFactoryMethod) {\n      factoryMethod = this.factory.getFactoryMethod(messageType);\n    } else {\n      // Fallback to simple method name lookup\n      const factoryMethodName = this.getFactoryMethodName(messageType);\n      factoryMethod = (this.factory as any)[factoryMethodName];\n    }\n\n    return fieldValue.map((item, index) => {\n      if (factoryMethod) {\n        const result = factoryMethod(parent, attributeName, index, item);\n        if (result.fullyLoaded) {\n          return result.instance;\n        } else {\n          // Factory created instance but didn't populate - use deserializer\n          return this.deserialize(result.instance, item, messageType);\n        }\n      }\n\n      // No factory method found - fallback\n      return this.fallbackDeserialize({}, item);\n    });\n  }\n\n  /**\n   * Convert message type to factory method name\n   * \"library.v1.Book\" -> \"newBook\"\n   */\n  private getFactoryMethodName(messageType: string): string {\n    const parts = messageType.split('.');\n    const typeName = parts[parts.length - 1]; // Get last part (e.g., \"Book\")\n    return 'new' + typeName;\n  }\n\n  /**\n   * Fallback deserializer for when no schema is available\n   */\n  private fallbackDeserialize<T>(instance: T, data: any): T {\n    if (!data || typeof data !== 'object') {\n      return instance;\n    }\n\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null && value !== undefined) {\n        (instance as any)[key] = value;\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   * Create and deserialize a new instance of a message type\n   */\n  createAndDeserialize<T>(messageType: string, data: any): T {\n    // Try to get factory method using cross-package delegation\n    let factoryMethod;\n    \n    if (this.factory.getFactoryMethod) {\n      factoryMethod = this.factory.getFactoryMethod(messageType);\n    } else {\n      // Fallback to simple method name lookup\n      const factoryMethodName = this.getFactoryMethodName(messageType);\n      factoryMethod = (this.factory as any)[factoryMethodName];\n    }\n\n    if (!factoryMethod) {\n      throw new Error(`Could not find factory method to deserialize: ${messageType}`)\n    }\n\n    const result = factoryMethod(undefined, undefined, undefined, data);\n    if (result.fullyLoaded) {\n      return result.instance;\n    } else {\n      return this.deserialize(result.instance, data, messageType);\n    }\n  }\n\n  /**\n   * Static utility method to create and deserialize a message without needing a deserializer instance\n   * @param messageType Fully qualified message type (use Class.MESSAGE_TYPE)\n   * @param data Raw data to deserialize\n   * @returns Deserialized instance or null if creation failed\n   */\n  static from<T>(messageType: string, data: any) {\n    const deserializer = new Connect4Deserializer(); // Uses default factory and schema registry\n    return deserializer.createAndDeserialize<T>(messageType, data);\n  }\n}\n","\n\nimport { GameState as GameStateInterface, GameConfig as GameConfigInterface, Player as PlayerInterface, GameBoard as GameBoardInterface, BoardRow as BoardRowInterface, PlayerStats as PlayerStatsInterface, GetGameRequest as GetGameRequestInterface, DropPieceRequest as DropPieceRequestInterface, DropPieceResponse as DropPieceResponseInterface, PieceDropResult as PieceDropResultInterface, LineInfo as LineInfoInterface, Position as PositionInterface, JoinGameRequest as JoinGameRequestInterface, JoinGameResponse as JoinGameResponseInterface, CreateGameRequest as CreateGameRequestInterface, CreateGameResponse as CreateGameResponseInterface, GameStatus } from \"./interfaces\";\n\n\nimport { GameState as ConcreteGameState, GameConfig as ConcreteGameConfig, Player as ConcretePlayer, GameBoard as ConcreteGameBoard, BoardRow as ConcreteBoardRow, PlayerStats as ConcretePlayerStats, GetGameRequest as ConcreteGetGameRequest, DropPieceRequest as ConcreteDropPieceRequest, DropPieceResponse as ConcreteDropPieceResponse, PieceDropResult as ConcretePieceDropResult, LineInfo as ConcreteLineInfo, Position as ConcretePosition, JoinGameRequest as ConcreteJoinGameRequest, JoinGameResponse as ConcreteJoinGameResponse, CreateGameRequest as ConcreteCreateGameRequest, CreateGameResponse as ConcreteCreateGameResponse } from \"./models\";\n\n\n\n/**\n * Factory result interface for enhanced factory methods\n */\nexport interface FactoryResult<T> {\n  instance: T;\n  fullyLoaded: boolean;\n}\n\n/**\n * Enhanced factory with context-aware object construction\n */\nexport class Connect4Factory {\n\n\n  /**\n   * Enhanced factory method for GameState\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newGameState = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<GameStateInterface> => {\n    const out = new ConcreteGameState();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for GameConfig\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newGameConfig = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<GameConfigInterface> => {\n    const out = new ConcreteGameConfig();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for Player\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newPlayer = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<PlayerInterface> => {\n    const out = new ConcretePlayer();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for GameBoard\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newGameBoard = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<GameBoardInterface> => {\n    const out = new ConcreteGameBoard();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for BoardRow\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newBoardRow = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<BoardRowInterface> => {\n    const out = new ConcreteBoardRow();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for PlayerStats\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newPlayerStats = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<PlayerStatsInterface> => {\n    const out = new ConcretePlayerStats();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for GetGameRequest\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newGetGameRequest = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<GetGameRequestInterface> => {\n    const out = new ConcreteGetGameRequest();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for DropPieceRequest\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newDropPieceRequest = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<DropPieceRequestInterface> => {\n    const out = new ConcreteDropPieceRequest();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for DropPieceResponse\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newDropPieceResponse = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<DropPieceResponseInterface> => {\n    const out = new ConcreteDropPieceResponse();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for PieceDropResult\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newPieceDropResult = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<PieceDropResultInterface> => {\n    const out = new ConcretePieceDropResult();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for LineInfo\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newLineInfo = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<LineInfoInterface> => {\n    const out = new ConcreteLineInfo();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for Position\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newPosition = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<PositionInterface> => {\n    const out = new ConcretePosition();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for JoinGameRequest\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newJoinGameRequest = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<JoinGameRequestInterface> => {\n    const out = new ConcreteJoinGameRequest();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for JoinGameResponse\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newJoinGameResponse = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<JoinGameResponseInterface> => {\n    const out = new ConcreteJoinGameResponse();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for CreateGameRequest\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newCreateGameRequest = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<CreateGameRequestInterface> => {\n    const out = new ConcreteCreateGameRequest();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n  /**\n   * Enhanced factory method for CreateGameResponse\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw data to potentially populate from\n   * @returns Factory result with instance and population status\n   */\n  newCreateGameResponse = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<CreateGameResponseInterface> => {\n    const out = new ConcreteCreateGameResponse();\n    \n    // Factory does not populate by default - let deserializer handle it\n    return { instance: out, fullyLoaded: false };\n  }\n\n\n\n  /**\n   * Get factory method for a fully qualified message type\n   * Enables cross-package factory delegation\n   */\n  getFactoryMethod(messageType: string): ((parent?: any, attributeName?: string, attributeKey?: string | number, data?: any) => FactoryResult<any>) | undefined {\n    // Extract package from message type (e.g., \"library.common.BaseMessage\" -> \"library.common\")\n    const parts = messageType.split('.');\n    if (parts.length < 2) {\n      return undefined;\n    }\n    \n    const packageName = parts.slice(0, -1).join('.');\n    const typeName = parts[parts.length - 1];\n    const methodName = 'new' + typeName;\n    \n    // Check if this is our own package first\n    const currentPackage = \"connect4\";\n    if (packageName === currentPackage) {\n      return (this as any)[methodName];\n    }\n    \n    // Check external type factory mappings\n    const externalFactory = this.externalTypeFactories()[messageType];\n    if (externalFactory) {\n      return externalFactory;\n    }\n    \n    // Delegate to appropriate dependency factory\n\n    \n    return undefined;\n  }\n\n\n\n  /**\n   * Generic object deserializer that respects factory decisions\n   */\n  protected deserializeObject(instance: any, data: any): any {\n    if (!data || typeof data !== 'object') return instance;\n    \n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null && value !== undefined) {\n        instance[key] = value;\n      }\n    }\n    return instance;\n  }\n\n  // External type conversion methods\n\n  /**\n   * Mapping of external types to their factory methods\n   */\n  private externalTypeFactories(): Record<string, (parent?: any, attributeName?: string, attributeKey?: string | number, data?: any) => FactoryResult<any>> { \n      return {\n          \"google.protobuf.Timestamp\": this.newTimestamp,\n          \"google.protobuf.FieldMask\": this.newFieldMask,\n      }\n  };\n\n  /**\n   * Convert native Date to protobuf Timestamp format for serialization\n   */\n  serializeTimestamp(date: Date): any {\n    if (!date) return null;\n    return {\n      seconds: Math.floor(date.getTime() / 1000).toString(),\n      nanos: (date.getTime() % 1000) * 1000000\n    };\n  }\n\n  /**\n   * Factory method for converting protobuf Timestamp data to native Date\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object  \n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw protobuf timestamp data\n   * @returns Factory result with Date instance\n   */\n  newTimestamp = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<Date> => {\n    if (!data) {\n      return { instance: new Date(), fullyLoaded: true };\n    }\n    \n    let date: Date;\n    if (typeof data === 'string') {\n      // Handle ISO string format\n      date = new Date(data);\n    } else if (data.seconds !== undefined) {\n      // Handle protobuf format with seconds/nanos\n      const seconds = typeof data.seconds === 'string' \n        ? parseInt(data.seconds, 10) \n        : data.seconds;\n      const nanos = data.nanos || 0;\n      date = new Date(seconds * 1000 + Math.floor(nanos / 1000000));\n    } else {\n      date = new Date();\n    }\n    \n    return { instance: date, fullyLoaded: true };\n  }\n\n  /**\n   * Convert native string array to protobuf FieldMask format for serialization\n   */\n  serializeFieldMask(paths: string[]): any {\n    if (!paths || !Array.isArray(paths)) return null;\n    return { paths };\n  }\n\n  /**\n   * Factory method for converting protobuf FieldMask data to native string array\n   * @param parent Parent object containing this field\n   * @param attributeName Field name in parent object\n   * @param attributeKey Array index, map key, or union tag (for containers)\n   * @param data Raw protobuf field mask data\n   * @returns Factory result with string array instance\n   */\n  newFieldMask = (\n    parent?: any,\n    attributeName?: string,\n    attributeKey?: string | number,\n    data?: any\n  ): FactoryResult<string[]> => {\n    if (!data) {\n      return { instance: [], fullyLoaded: true };\n    }\n    \n    let paths: string[];\n    if (Array.isArray(data)) {\n      paths = data;\n    } else if (data.paths && Array.isArray(data.paths)) {\n      paths = data.paths;\n    } else {\n      paths = [];\n    }\n    \n    return { instance: paths, fullyLoaded: true };\n  }\n}\n","import { GameState as GameStateInterface, GameConfig as GameConfigInterface, Player as PlayerInterface, GameBoard as GameBoardInterface, BoardRow as BoardRowInterface, PlayerStats as PlayerStatsInterface, GetGameRequest as GetGameRequestInterface, DropPieceRequest as DropPieceRequestInterface, DropPieceResponse as DropPieceResponseInterface, PieceDropResult as PieceDropResultInterface, LineInfo as LineInfoInterface, Position as PositionInterface, JoinGameRequest as JoinGameRequestInterface, JoinGameResponse as JoinGameResponseInterface, CreateGameRequest as CreateGameRequestInterface, CreateGameResponse as CreateGameResponseInterface, GameStatus } from \"./interfaces\";\nimport { Connect4Deserializer } from \"./deserializer\";\n\n\n\nexport class GameState implements GameStateInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.GameState\";\n\n  gameId: string = \"\";\n  config?: GameConfig;\n  players: Player[] = [];\n  board?: GameBoard;\n  currentPlayerId: string = \"\";\n  turnNumber: number = 0;\n  status: GameStatus = 0;\n  winners: string[] = [];\n  playerStats?: Map<string, PlayerStats>;\n  lastMoveTime: number = 0;\n  moveTimeoutSeconds: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized GameState instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<GameState>(GameState.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class GameConfig implements GameConfigInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.GameConfig\";\n\n  boardWidth: number = 0;\n  boardHeight: number = 0;\n  minPlayers: number = 0;\n  maxPlayers: number = 0;\n  connectLength: number = 0;\n  allowMultipleWinners: boolean = false;\n  moveTimeoutSeconds: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized GameConfig instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<GameConfig>(GameConfig.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class Player implements PlayerInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.Player\";\n\n  id: string = \"\";\n  name: string = \"\";\n  color: string = \"\";\n  isConnected: boolean = false;\n  joinOrder: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized Player instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<Player>(Player.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class GameBoard implements GameBoardInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.GameBoard\";\n\n  width: number = 0;\n  height: number = 0;\n  /** Board representation: grid[y][x] = player_id (empty = \"\") */\n  rows: BoardRow[] = [];\n  columnHeights: number[] = [];\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized GameBoard instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<GameBoard>(GameBoard.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class BoardRow implements BoardRowInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.BoardRow\";\n\n  cells: string[] = [];\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized BoardRow instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<BoardRow>(BoardRow.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class PlayerStats implements PlayerStatsInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.PlayerStats\";\n\n  piecesPlayed: number = 0;\n  winningLines: number = 0;\n  hasWon: boolean = false;\n  totalMoveTime: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized PlayerStats instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<PlayerStats>(PlayerStats.MESSAGE_TYPE, data);\n  }\n}\n\n\n/**\n * Request/Response messages\n */\nexport class GetGameRequest implements GetGameRequestInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.GetGameRequest\";\n\n  gameId: string = \"\";\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized GetGameRequest instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<GetGameRequest>(GetGameRequest.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class DropPieceRequest implements DropPieceRequestInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.DropPieceRequest\";\n\n  gameId: string = \"\";\n  playerId: string = \"\";\n  column: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized DropPieceRequest instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<DropPieceRequest>(DropPieceRequest.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class DropPieceResponse implements DropPieceResponseInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.DropPieceResponse\";\n\n  success: boolean = false;\n  errorMessage: string = \"\";\n  /** repeated wasmjs.v1.MessagePatch patches = 3; */\n  changeNumber: number = 0;\n  result?: PieceDropResult;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized DropPieceResponse instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<DropPieceResponse>(DropPieceResponse.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class PieceDropResult implements PieceDropResultInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.PieceDropResult\";\n\n  finalRow: number = 0;\n  finalColumn: number = 0;\n  formedLine: boolean = false;\n  winningLines: LineInfo[] = [];\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized PieceDropResult instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<PieceDropResult>(PieceDropResult.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class LineInfo implements LineInfoInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.LineInfo\";\n\n  positions: Position[] = [];\n  direction: string = \"\";\n  length: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized LineInfo instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<LineInfo>(LineInfo.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class Position implements PositionInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.Position\";\n\n  row: number = 0;\n  column: number = 0;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized Position instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<Position>(Position.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class JoinGameRequest implements JoinGameRequestInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.JoinGameRequest\";\n\n  gameId: string = \"\";\n  playerName: string = \"\";\n  preferredColor: string = \"\";\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized JoinGameRequest instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<JoinGameRequest>(JoinGameRequest.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class JoinGameResponse implements JoinGameResponseInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.JoinGameResponse\";\n\n  success: boolean = false;\n  errorMessage: string = \"\";\n  playerId: string = \"\";\n  assignedColor: string = \"\";\n  gameState?: GameState;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized JoinGameResponse instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<JoinGameResponse>(JoinGameResponse.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class CreateGameRequest implements CreateGameRequestInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.CreateGameRequest\";\n\n  gameId: string = \"\";\n  config?: GameConfig;\n  creatorName: string = \"\";\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized CreateGameRequest instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<CreateGameRequest>(CreateGameRequest.MESSAGE_TYPE, data);\n  }\n}\n\n\n\nexport class CreateGameResponse implements CreateGameResponseInterface {\n  /**\n   * Fully qualified message type for schema resolution\n   */\n  static readonly MESSAGE_TYPE = \"connect4.CreateGameResponse\";\n\n  success: boolean = false;\n  errorMessage: string = \"\";\n  playerId: string = \"\";\n  gameState?: GameState;\n\n  /**\n   * Create and deserialize an instance from raw data\n   * @param data Raw data to deserialize\n   * @returns Deserialized CreateGameResponse instance or null if creation failed\n   */\n  static from(data: any) {\n    return Connect4Deserializer.from<CreateGameResponse>(CreateGameResponse.MESSAGE_TYPE, data);\n  }\n}\n\n\n","// Entry point for the game viewer page (/{gameId})\n// Handles individual Connect4 game interface and real-time multiplayer\n\nimport Connect4Client from '../gen/wasmts/multiplayer_connect4Client.client';\nimport { GameState, GameConfig, Player } from '../gen/wasmts/connect4/models';\n\n// Note: StatefulProxy will be available globally from the included script\ndeclare var StatefulProxy: any;\n\n// Game interface state\ninterface GameUI {\n    gameId: string;\n    playerId: string;\n    gameState: GameState | null;\n    statefulProxy: any;\n    connect4Client: Connect4Client | null;\n}\n\nclass GameViewer {\n    private ui: GameUI;\n    private elements: { [key: string]: HTMLElement | null } = {};\n\n    constructor() {\n        // Extract game ID from URL path\n        const pathParts = window.location.pathname.split('/').filter(p => p);\n        const gameId = pathParts[0] || '';\n        \n        this.ui = {\n            gameId,\n            playerId: '',\n            gameState: null,\n            statefulProxy: null,\n            connect4Client: null\n        };\n\n        this.init();\n    }\n\n    private async init(): Promise<void>{\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initializeUI());\n        } else {\n            this.initializeUI();\n        }\n    }\n\n    private initializeUI(): void {\n        // Get UI elements\n        this.elements = {\n            joinGameForm: document.getElementById('joinGameForm'),\n            gameInterface: document.getElementById('gameInterface'),\n            errorState: document.getElementById('errorState'),\n            gameBoard: document.getElementById('gameBoard'),\n            gameStatus: document.getElementById('gameStatus'),\n            currentPlayerName: document.getElementById('currentPlayerName'),\n            currentPlayerColor: document.getElementById('currentPlayerColor'),\n            turnNumber: document.getElementById('turnNumber'),\n            playersList: document.getElementById('playersList'),\n            gameLog: document.getElementById('gameLog'),\n            currentGameId: document.getElementById('currentGameId'),\n            gameUrl: document.getElementById('gameUrl')\n        };\n\n        // Set game ID and URL in UI\n        if (this.elements.currentGameId) {\n            this.elements.currentGameId.textContent = this.ui.gameId;\n        }\n        if (this.elements.gameUrl) {\n            this.elements.gameUrl.textContent = window.location.href;\n        }\n\n        // Check if we have a valid game ID\n        if (!this.ui.gameId || !this.isValidGameId(this.ui.gameId)) {\n            this.showError('Invalid game ID');\n            return;\n        }\n\n        // Set up form handlers\n        const joinForm = document.getElementById('joinGameForm');\n        if (joinForm) {\n            joinForm.addEventListener('submit', (e) => this.handleJoinGame(e));\n        }\n\n        // Initialize game components\n        this.initializeWasmClient();\n        this.initializeStatefulProxy();\n        this.loadStoredGameState();\n    }\n\n    private async initializeWasmClient(): Promise<void> {\n        try {\n            console.log('Loading WASM module...');\n            this.ui.connect4Client = new Connect4Client();\n            await this.ui.connect4Client.loadWasm('/static/wasm/multiplayer_connect4.wasm');\n            await this.ui.connect4Client.waitUntilReady();\n            console.log('WASM module loaded successfully!');\n        } catch (error) {\n            console.error('Failed to load WASM:', error);\n            this.showError('Failed to load game engine');\n        }\n    }\n\n    private initializeStatefulProxy(): void {\n        try {\n            // Initialize stateful proxy with IndexedDB transport for cross-page persistence\n            this.ui.statefulProxy = new StatefulProxy(this.ui.gameId, 'indexeddb');\n            \n            // Set up state change listener\n            this.ui.statefulProxy.onStateChange((patches: any[]) => {\n                console.log('Received state patches:', patches);\n                this.applyPatches(patches);\n            });\n\n            console.log('Stateful proxy initialized');\n        } catch (error) {\n            console.error('Failed to initialize stateful proxy:', error);\n        }\n    }\n\n    private loadStoredGameState(): void {\n        try {\n            const stored = localStorage.getItem(`connect4_game_${this.ui.gameId}`);\n            if (stored) {\n                const parsedState = JSON.parse(stored);\n                this.ui.gameState = GameState.from(parsedState);\n                console.log('Loaded stored game state:', this.ui.gameState);\n                \n                // Check if we can resume the game\n                if (this.ui.gameState && this.ui.gameState.players.length > 0) {\n                    // Try to find stored player ID\n                    const storedPlayerId = localStorage.getItem(`connect4_player_${this.ui.gameId}`);\n                    if (storedPlayerId) {\n                        this.ui.playerId = storedPlayerId;\n                        this.showGameInterface();\n                        this.updateGameDisplay();\n                        return;\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Failed to parse stored game state:', error);\n        }\n\n        // Show join form if no valid stored state\n        this.showJoinForm();\n    }\n\n    private async handleJoinGame(event: Event): Promise<void> {\n        event.preventDefault();\n        \n        const formData = new FormData(event.target as HTMLFormElement);\n        const playerName = formData.get('playerName') as string;\n\n        if (!playerName.trim()) {\n            alert('Please enter your name');\n            return;\n        }\n\n        this.ui.playerId = `player_${Date.now()}`;\n        \n        try {\n            // Try to join existing game first\n            const joinResponse = await this.joinGame(playerName);\n            \n            if (joinResponse.success) {\n                this.ui.gameState = GameState.from(joinResponse.data);\n                this.storeGameState();\n                this.showGameInterface();\n                this.updateGameDisplay();\n                this.addLogEntry(`${playerName} joined the game`);\n            } else {\n                // If join fails, try to create a new game\n                console.log('Join failed, attempting to create new game...');\n                const createResponse = await this.createGame(playerName);\n                \n                if (createResponse.success) {\n                    this.ui.gameState = GameState.from(createResponse.data);\n                    this.storeGameState();\n                    this.showGameInterface();\n                    this.updateGameDisplay();\n                    this.addLogEntry(`Game created by ${playerName}`);\n                } else {\n                    throw new Error(createResponse.message || 'Failed to create game');\n                }\n            }\n        } catch (error) {\n            console.error('Error joining game:', error);\n            this.showError('Failed to join or create game. Please try again.');\n        }\n    }\n\n    private async joinGame(playerName: string): Promise<any> {\n        if (!this.ui.connect4Client) {\n            throw new Error('WASM client not initialized');\n        }\n\n        return await this.ui.connect4Client.callMethod('connect4Service.joinGame', {\n            gameId: this.ui.gameId,\n            playerId: this.ui.playerId,\n            playerName: playerName\n        });\n    }\n\n    private async createGame(playerName: string): Promise<any> {\n        if (!this.ui.connect4Client) {\n            throw new Error('WASM client not initialized');\n        }\n\n        const gameConfig = {\n            boardWidth: 7,\n            boardHeight: 6,\n            connectLength: 4,\n            maxPlayers: 2,\n            minPlayers: 2,\n            allowMultipleWinners: false,\n            moveTimeoutSeconds: 30\n        };\n\n        const response = await this.ui.connect4Client.callMethod('connect4Service.createGame', {\n            gameId: this.ui.gameId,\n            playerId: this.ui.playerId,\n            playerName: playerName,\n            config: gameConfig\n        }) as any;\n\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to create game');\n        }\n\n        return response;\n    }\n\n    public async dropPiece(column: number): Promise<void> {\n        if (!this.ui.connect4Client || !this.ui.gameState) {\n            console.error('Game not properly initialized');\n            return;\n        }\n\n        try {\n            const response = await this.ui.connect4Client.callMethod('connect4Service.dropPiece', {\n                gameId: this.ui.gameId,\n                playerId: this.ui.playerId,\n                column: column\n            }) as any;\n\n            if (response.success) {\n                this.ui.gameState = GameState.from(response.data);\n                this.storeGameState();\n                this.updateGameDisplay();\n                \n                // Send state update through stateful proxy\n                if (this.ui.statefulProxy) {\n                    this.ui.statefulProxy.sendPatches([{\n                        operation: 'update',\n                        path: '',\n                        value: this.ui.gameState,\n                        timestamp: Date.now(),\n                        source: this.ui.playerId\n                    }]);\n                }\n            } else {\n                console.error('Failed to drop piece:', response.message);\n            }\n        } catch (error) {\n            console.error('Error dropping piece:', error);\n        }\n    }\n\n    private applyPatches(patches: any[]): void {\n        for (const patch of patches) {\n            if (patch.operation === 'update' && patch.value) {\n                try {\n                    const newState = GameState.from(patch.value);\n                    if (newState) {\n                        this.ui.gameState = newState;\n                        this.storeGameState();\n                        this.updateGameDisplay();\n                        this.addLogEntry('Game state updated from another player');\n                    }\n                } catch (error) {\n                    console.error('Failed to apply patch:', error);\n                }\n            }\n        }\n    }\n\n    private showJoinForm(): void {\n        if (this.elements.joinGameForm) {\n            this.elements.joinGameForm.classList.remove('hidden');\n        }\n        if (this.elements.gameInterface) {\n            this.elements.gameInterface.classList.add('hidden');\n        }\n        if (this.elements.errorState) {\n            this.elements.errorState.classList.add('hidden');\n        }\n    }\n\n    private showGameInterface(): void {\n        if (this.elements.joinGameForm) {\n            this.elements.joinGameForm.classList.add('hidden');\n        }\n        if (this.elements.gameInterface) {\n            this.elements.gameInterface.classList.remove('hidden');\n        }\n        if (this.elements.errorState) {\n            this.elements.errorState.classList.add('hidden');\n        }\n        \n        this.initializeGameBoard();\n    }\n\n    private showError(message: string): void {\n        if (this.elements.joinGameForm) {\n            this.elements.joinGameForm.classList.add('hidden');\n        }\n        if (this.elements.gameInterface) {\n            this.elements.gameInterface.classList.add('hidden');\n        }\n        if (this.elements.errorState) {\n            this.elements.errorState.classList.remove('hidden');\n            const errorMessage = this.elements.errorState.querySelector('p');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n    }\n\n    private initializeGameBoard(): void {\n        if (!this.elements.gameBoard || !this.ui.gameState?.board) return;\n\n        const rows = this.ui.gameState.config?.boardHeight || 6;\n        const cols = this.ui.gameState.config?.boardWidth || 7;\n\n        let boardHTML = '';\n        for (let row = 0; row < rows; row++) {\n            boardHTML += '<div class=\"board-row\">';\n            for (let col = 0; col < cols; col++) {\n                const cellValue = this.ui.gameState.board.rows[row]?.cells[col] || '';\n                const pieceClass = cellValue ? `piece-${cellValue}` : '';\n                boardHTML += `\n                    <div class=\"board-cell ${pieceClass}\" \n                         data-row=\"${row}\" \n                         data-col=\"${col}\"\n                         onclick=\"gameViewer.dropPiece(${col})\">\n                        ${cellValue ? '●' : ''}\n                    </div>\n                `;\n            }\n            boardHTML += '</div>';\n        }\n\n        this.elements.gameBoard.innerHTML = boardHTML;\n    }\n\n    private updateGameDisplay(): void {\n        if (!this.ui.gameState) return;\n\n        // Update turn information\n        if (this.elements.turnNumber) {\n            this.elements.turnNumber.textContent = this.ui.gameState.turnNumber.toString();\n        }\n\n        // Update current player\n        const currentPlayer = this.ui.gameState.players.find(p => p.id === this.ui.gameState!.currentPlayerId);\n        if (this.elements.currentPlayerName && currentPlayer) {\n            this.elements.currentPlayerName.textContent = currentPlayer.name;\n        }\n\n        // Update game status\n        if (this.elements.gameStatus) {\n            let statusText = 'In Progress';\n            if (this.ui.gameState.status === 2) { // Assuming 2 is game over\n                statusText = this.ui.gameState.winners.length > 0 ? \n                    `Game Over - Winner: ${this.ui.gameState.winners.join(', ')}` : \n                    'Game Over - Draw';\n            } else if (this.ui.gameState.players.length < 2) {\n                statusText = 'Waiting for players...';\n            }\n            this.elements.gameStatus.textContent = statusText;\n        }\n\n        // Update players list\n        if (this.elements.playersList) {\n            this.elements.playersList.innerHTML = this.ui.gameState.players.map(player => `\n                <div class=\"player-item ${player.id === this.ui.gameState!.currentPlayerId ? 'current' : ''}\">\n                    <span class=\"player-name\">${player.name}</span>\n                    <span class=\"player-color player-color-${player.color || 'red'}\">●</span>\n                </div>\n            `).join('');\n        }\n\n        // Update board\n        this.initializeGameBoard();\n    }\n\n    private storeGameState(): void {\n        if (this.ui.gameState) {\n            localStorage.setItem(`connect4_game_${this.ui.gameId}`, JSON.stringify(this.ui.gameState));\n            localStorage.setItem(`connect4_player_${this.ui.gameId}`, this.ui.playerId);\n        }\n    }\n\n    private addLogEntry(message: string): void {\n        if (!this.elements.gameLog) return;\n        \n        const timestamp = new Date().toLocaleTimeString();\n        const logEntry = document.createElement('div');\n        logEntry.className = 'log-entry';\n        logEntry.innerHTML = `<span class=\"timestamp\">[${timestamp}]</span> ${message}`;\n        \n        this.elements.gameLog.appendChild(logEntry);\n        this.elements.gameLog.scrollTop = this.elements.gameLog.scrollHeight;\n    }\n\n    private isValidGameId(gameId: string): boolean {\n        if (!gameId || gameId.length === 0 || gameId.length > 50) {\n            return false;\n        }\n        return /^[a-zA-Z0-9-]+$/.test(gameId);\n    }\n\n    // Public methods for HTML onclick handlers\n    public resetGame(): void {\n        if (confirm('Are you sure you want to start a new game?')) {\n            localStorage.removeItem(`connect4_game_${this.ui.gameId}`);\n            localStorage.removeItem(`connect4_player_${this.ui.gameId}`);\n            window.location.reload();\n        }\n    }\n\n    public leaveGame(): void {\n        if (confirm('Are you sure you want to leave this game?')) {\n            localStorage.removeItem(`connect4_game_${this.ui.gameId}`);\n            localStorage.removeItem(`connect4_player_${this.ui.gameId}`);\n            window.location.href = '/';\n        }\n    }\n}\n\n// Initialize the game viewer\nconst gameViewer = new GameViewer();\n\n// Make it globally available for HTML onclick handlers\n(window as any).gameViewer = gameViewer;\n(window as any).joinCurrentGame = () => {\n    const form = document.getElementById('joinGameForm');\n    if (form) {\n        form.dispatchEvent(new Event('submit'));\n    }\n};\n(window as any).resetGame = () => gameViewer.resetGame();\n(window as any).leaveGame = () => gameViewer.leaveGame();\n\nexport default gameViewer;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","WasmError","Error","constructor","message","methodPath","super","name","Connect4ServiceClientImpl","parent","getGame","request","callMethod","dropPiece","joinGame","createGame","wasmLoadPromise","connect4Service","loadWasm","wasmPath","loadWASMModule","isReady","wasm","undefined","waitUntilReady","ensureWASMLoaded","jsonReq","JSON","parse","stringify","wasmResponse","getWasmMethod","wasmMethod","success","data","error","String","console","log","window","multiplayerConnect4","Go","script","document","createElement","src","head","appendChild","Promise","resolve","reject","onload","onerror","go","wasmModule","WebAssembly","instantiateStreaming","fetch","importObject","run","instance","parts","split","current","part","FieldType","Connect4SchemaRegistry","fields","type","STRING","id","MESSAGE","messageType","repeated","NUMBER","REPEATED","BOOLEAN","DEFAULT_FACTORY","newGameState","attributeName","attributeKey","fullyLoaded","newGameConfig","newPlayer","newGameBoard","newBoardRow","newPlayerStats","newGetGameRequest","newDropPieceRequest","newDropPieceResponse","newPieceDropResult","newLineInfo","newPosition","newJoinGameRequest","newJoinGameResponse","newCreateGameRequest","newCreateGameResponse","newTimestamp","Date","date","seconds","parseInt","nanos","Math","floor","newFieldMask","paths","Array","isArray","getFactoryMethod","length","packageName","slice","join","typeName","externalTypeFactories","deserializeObject","entries","serializeTimestamp","getTime","toString","serializeFieldMask","Connect4Deserializer","schemaRegistry","deserialize","schema","fallbackDeserialize","fieldSchema","fieldValue","deserializeField","fieldName","deserializeMessageArray","deserializeMessageField","ONEOF","MAP","factoryMethod","factoryMethodName","getFactoryMethodName","result","map","item","index","createAndDeserialize","from","GameState","gameId","players","currentPlayerId","turnNumber","status","winners","lastMoveTime","moveTimeoutSeconds","MESSAGE_TYPE","GameConfig","boardWidth","boardHeight","minPlayers","maxPlayers","connectLength","allowMultipleWinners","Player","color","isConnected","joinOrder","GameBoard","width","height","rows","columnHeights","BoardRow","cells","PlayerStats","piecesPlayed","winningLines","hasWon","totalMoveTime","GetGameRequest","DropPieceRequest","playerId","column","DropPieceResponse","errorMessage","changeNumber","PieceDropResult","finalRow","finalColumn","formedLine","LineInfo","positions","direction","Position","row","JoinGameRequest","playerName","preferredColor","JoinGameResponse","assignedColor","CreateGameRequest","creatorName","CreateGameResponse","gameViewer","elements","location","pathname","filter","p","ui","gameState","statefulProxy","connect4Client","init","readyState","addEventListener","initializeUI","joinGameForm","getElementById","gameInterface","errorState","gameBoard","gameStatus","currentPlayerName","currentPlayerColor","playersList","gameLog","currentGameId","gameUrl","textContent","href","isValidGameId","showError","joinForm","e","handleJoinGame","initializeWasmClient","initializeStatefulProxy","loadStoredGameState","StatefulProxy","onStateChange","patches","applyPatches","stored","localStorage","getItem","parsedState","storedPlayerId","showGameInterface","updateGameDisplay","showJoinForm","event","preventDefault","FormData","target","trim","now","joinResponse","storeGameState","addLogEntry","createResponse","alert","response","config","sendPatches","operation","path","timestamp","source","patch","newState","classList","remove","add","initializeGameBoard","querySelector","board","cols","boardHTML","col","cellValue","innerHTML","currentPlayer","find","statusText","player","setItem","toLocaleTimeString","logEntry","className","scrollTop","scrollHeight","test","resetGame","confirm","removeItem","reload","leaveGame","joinCurrentGame","form","dispatchEvent","Event"],"sourceRoot":""}