!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("connect4Pages",[],t):"object"==typeof exports?exports.connect4Pages=t():(e.connect4Pages=e.connect4Pages||{},e.connect4Pages.index=t())}(this,()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>c});var n=function(e,t,n,o){return new(n||(n=Promise))(function(a,i){function r(e){try{c(o.next(e))}catch(e){i(e)}}function s(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((o=o.apply(e,t||[])).next())})};class o extends Error{constructor(e,t){super(e),this.methodPath=t,this.name="WasmError"}}class a{constructor(e){this.parent=e}getGame(e){return n(this,void 0,void 0,function*(){return this.parent.callMethod("connect4Service.getGame",e)})}dropPiece(e){return n(this,void 0,void 0,function*(){return this.parent.callMethod("connect4Service.dropPiece",e)})}joinGame(e){return n(this,void 0,void 0,function*(){return this.parent.callMethod("connect4Service.joinGame",e)})}createGame(e){return n(this,void 0,void 0,function*(){return this.parent.callMethod("connect4Service.createGame",e)})}}const i=class{constructor(){this.wasmLoadPromise=null,this.connect4Service=new a(this)}loadWasm(){return n(this,arguments,void 0,function*(e="./multiplayer_connect4.wasm"){return this.wasmLoadPromise||(this.wasmLoadPromise=this.loadWASMModule(e)),this.wasmLoadPromise})}isReady(){return null!==this.wasm&&void 0!==this.wasm}waitUntilReady(){return n(this,void 0,void 0,function*(){if(!this.wasmLoadPromise)throw new Error("WASM loading not started. Call loadWasm() first.");yield this.wasmLoadPromise})}callMethod(e,t){this.ensureWASMLoaded();try{const n=JSON.parse(JSON.stringify(t)),a=this.getWasmMethod(e)(JSON.stringify(n));if(!a.success)throw new o(a.message,e);return a.data}catch(t){if(t instanceof o)throw t;throw new o(`Call error: ${t instanceof Error?t.message:String(t)}`,e)}}loadWASMModule(e){return n(this,void 0,void 0,function*(){if(console.log("Loading multiplayer_connect4 WASM module..."),window.multiplayerConnect4)return console.log("WASM module already loaded (pre-loaded in test environment)"),void(this.wasm=window.multiplayerConnect4);if(!window.Go){const e=document.createElement("script");e.src="/static/wasm/wasm_exec.js",document.head.appendChild(e),yield new Promise((t,n)=>{e.onload=()=>t(),e.onerror=()=>n(new Error("Failed to load wasm_exec.js"))})}const t=new window.Go,n=yield WebAssembly.instantiateStreaming(fetch(e),t.importObject);if(t.run(n.instance),!window.multiplayerConnect4)throw new Error("WASM APIs not found - module may not have loaded correctly");this.wasm=window.multiplayerConnect4,console.log("multiplayer_connect4 WASM module loaded successfully")})}ensureWASMLoaded(){if(!this.isReady())throw new Error("WASM module not loaded. Call loadWasm() and waitUntilReady() first.")}getWasmMethod(e){const t=e.split(".");let n=this.wasm;for(const o of t)if(n=n[o],!n)throw new Error(`Method not found: ${e}`);return n}};var r=function(e,t,n,o){return new(n||(n=Promise))(function(a,i){function r(e){try{c(o.next(e))}catch(e){i(e)}}function s(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((o=o.apply(e,t||[])).next())})};const s=new class{constructor(){this.gamesContainer=null,this.createForm=null,this.connect4Client=null,this.init()}init(){return r(this,void 0,void 0,function*(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.initializeUI()):this.initializeUI()})}initializeUI(){this.gamesContainer=document.getElementById("gamesList"),this.createForm=document.getElementById("createGameForm"),this.createForm&&this.createForm.addEventListener("submit",e=>this.handleCreateGame(e)),this.loadExistingGames(),this.initializeWasmClient()}initializeWasmClient(){return r(this,void 0,void 0,function*(){try{console.log("Initializing WASM client for games list..."),this.connect4Client=new i,yield this.connect4Client.loadWasm("/static/wasm/multiplayer_connect4.wasm"),yield this.connect4Client.waitUntilReady(),console.log("WASM client ready for game operations")}catch(e){console.error("Failed to initialize WASM client:",e)}})}loadExistingGames(){if(!this.gamesContainer)return;const e=this.getStoredGames();0!==e.length?this.gamesContainer.innerHTML=e.map(e=>`\n            <div class="game-item" data-game-id="${e.gameId}">\n                <div class="game-info">\n                    <h3>${e.gameId}</h3>\n                    <p>Player: ${e.playerName}</p>\n                    <p>Status: ${e.gameStatus||"Unknown"}</p>\n                    <small>Last played: ${new Date(e.lastPlayed).toLocaleString()}</small>\n                </div>\n                <div class="game-actions">\n                    <a href="/${e.gameId}" class="btn">Continue Game</a>\n                    <button class="btn btn-secondary" onclick="gamesManager.removeGame('${e.gameId}')">Remove</button>\n                </div>\n            </div>\n        `).join(""):this.gamesContainer.innerHTML='\n                <div class="no-games">\n                    <p>No games found. Create your first game!</p>\n                </div>\n            '}handleCreateGame(e){return r(this,void 0,void 0,function*(){e.preventDefault();const t=new FormData(e.target),n=t.get("gameId"),o=t.get("playerName");if(n&&o)try{if(!this.isValidGameId(n))return void alert("Game ID can only contain letters, numbers, and hyphens");this.storeGame({gameId:n,playerName:o,lastPlayed:Date.now(),gameStatus:"Created"}),window.location.href=`/${n}`}catch(e){console.error("Error creating game:",e),alert("Failed to create game. Please try again.")}else alert("Please fill in all fields")})}getStoredGames(){try{const e=localStorage.getItem("connect4Games");return e?JSON.parse(e):[]}catch(e){return console.error("Error loading stored games:",e),[]}}storeGame(e){try{const t=this.getStoredGames(),n=t.findIndex(t=>t.gameId===e.gameId);n>=0?t[n]=e:t.push(e),localStorage.setItem("connect4Games",JSON.stringify(t)),this.loadExistingGames()}catch(e){console.error("Error storing game:",e)}}removeGame(e){try{const t=this.getStoredGames().filter(t=>t.gameId!==e);localStorage.setItem("connect4Games",JSON.stringify(t)),this.loadExistingGames()}catch(e){console.error("Error removing game:",e)}}isValidGameId(e){return!(!e||0===e.length||e.length>50)&&/^[a-zA-Z0-9-]+$/.test(e)}};window.gamesManager=s;const c=s;return t})());
//# sourceMappingURL=index.4fc4b8a2f398faee8fc5.js.map