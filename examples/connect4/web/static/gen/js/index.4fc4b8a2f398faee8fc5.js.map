{"version":3,"file":"index.4fc4b8a2f398faee8fc5.js","mappings":"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","sources":["webpack://connect4Pages/webpack/universalModuleDefinition","webpack://connect4Pages/webpack/bootstrap","webpack://connect4Pages/webpack/runtime/define property getters","webpack://connect4Pages/webpack/runtime/hasOwnProperty shorthand","webpack://connect4Pages/webpack/runtime/make namespace object","webpack://connect4Pages/./gen/wasmts/multiplayer_connect4Client.client.ts","webpack://connect4Pages/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"connect4Pages\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"connect4Pages\"] = factory();\n\telse\n\t\troot[\"connect4Pages\"] = root[\"connect4Pages\"] || {}, root[\"connect4Pages\"][\"index\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.\n// source: connect4/game.proto\n\n/**\n * WASM Response interface for all service calls\n */\nexport interface WASMResponse<T = any> {\n    success: boolean;\n    message: string;\n    data: T;\n}\n\n/**\n * Error class for WASM-specific errors\n */\nexport class WasmError extends Error {\n    constructor(message: string, public readonly methodPath?: string) {\n        super(message);\n        this.name = 'WasmError';\n    }\n}\n/**\n * Connect4Service service client interface\n * Uses any types since we generate our own TypeScript interfaces\n */\nexport interface Connect4ServiceMethods {\n\tgetGame(request: any): Promise<any>;\n\tdropPiece(request: any): Promise<any>;\n\tjoinGame(request: any): Promise<any>;\n\tcreateGame(request: any): Promise<any>;\n}\n\n/**\n * multiplayer_connect4 WASM client\n * Provides a clean interface between UI components and the Go WASM service implementations\n */\nexport class Multiplayer_connect4Client {\n    private wasm: any;\n    private wasmLoadPromise: Promise<void> | null = null;\n\n    // Service-specific clients\n    public readonly connect4Service: Connect4ServiceClientImpl;\n\n    constructor() {\n        this.connect4Service = new Connect4ServiceClientImpl(this);\n    }\n\n    /**\n     * Load the WASM module asynchronously\n     */\n    public async loadWasm(wasmPath: string = './multiplayer_connect4.wasm'): Promise<void> {\n        if (this.wasmLoadPromise) {\n            return this.wasmLoadPromise;\n        }\n\n        this.wasmLoadPromise = this.loadWASMModule(wasmPath);\n        return this.wasmLoadPromise;\n    }\n\n    /**\n     * Check if WASM is ready for operations\n     */\n    public isReady(): boolean {\n        return this.wasm !== null && this.wasm !== undefined;\n    }\n\n    /**\n     * Wait for WASM to be ready (use during initialization)\n     */\n    public async waitUntilReady(): Promise<void> {\n        if (!this.wasmLoadPromise) {\n            throw new Error('WASM loading not started. Call loadWasm() first.');\n        }\n        await this.wasmLoadPromise;\n    }\n\n    /**\n     * Internal method to call WASM functions with JSON conversion\n     */\n    public callMethod<TRequest, TResponse>(\n        methodPath: string,\n        request: TRequest\n    ): Promise<TResponse> {\n        this.ensureWASMLoaded();\n\n        try {\n            // Convert request to JSON\n            const jsonReq = JSON.parse(JSON.stringify(request));\n            const wasmMethod = this.getWasmMethod(methodPath);\n            const wasmResponse = wasmMethod(JSON.stringify(jsonReq));\n\n            if (!wasmResponse.success) {\n                throw new WasmError(wasmResponse.message, methodPath);\n            }\n\n            // Return response data directly\n            return wasmResponse.data;\n        } catch (error) {\n            if (error instanceof WasmError) {\n                throw error;\n            }\n            throw new WasmError(\n                `Call error: ${error instanceof Error ? error.message : String(error)}`,\n                methodPath\n            );\n        }\n    }\n\n    /**\n     * Load the WASM module implementation\n     */\n    private async loadWASMModule(wasmPath: string): Promise<void> {\n        console.log('Loading multiplayer_connect4 WASM module...');\n\n        // Check if WASM is already loaded (for testing environments)\n        if ((window as any).multiplayerConnect4) {\n            console.log('WASM module already loaded (pre-loaded in test environment)');\n            this.wasm = (window as any).multiplayerConnect4;\n            return;\n        }\n\n        // Load Go's WASM support\n        if (!(window as any).Go) {\n            const script = document.createElement('script');\n            script.src = '/static/wasm/wasm_exec.js';\n            document.head.appendChild(script);\n\n            await new Promise<void>((resolve, reject) => {\n                script.onload = () => resolve();\n                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));\n            });\n        }\n\n        // Initialize Go WASM runtime\n        const go = new (window as any).Go();\n        const wasmModule = await WebAssembly.instantiateStreaming(\n            fetch(wasmPath),\n            go.importObject\n        );\n\n        // Run the WASM module\n        go.run(wasmModule.instance);\n\n        // Verify WASM APIs are available\n        if (!(window as any).multiplayerConnect4) {\n            throw new Error('WASM APIs not found - module may not have loaded correctly');\n        }\n        this.wasm = (window as any).multiplayerConnect4;\n\n        console.log('multiplayer_connect4 WASM module loaded successfully');\n    }\n\n    /**\n     * Ensure WASM module is loaded (synchronous version for service calls)\n     */\n    private ensureWASMLoaded(): void {\n        if (!this.isReady()) {\n            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');\n        }\n    }\n\n    /**\n     * Get WASM method function by path\n     */\n    private getWasmMethod(methodPath: string): Function {\n        // Handle namespaced structure: namespace.service.method\n        const parts = methodPath.split('.');\n        let current = this.wasm;\n        for (const part of parts) {\n            current = current[part];\n            if (!current) {\n                throw new Error(`Method not found: ${methodPath}`);\n            }\n        }\n        return current;\n    }\n}\n/**\n * Connect4Service service client implementation\n */\nclass Connect4ServiceClientImpl implements Connect4ServiceMethods {\n    constructor(private parent: Multiplayer_connect4Client) {}\n    async getGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.getGame', request);\n    }\n    async dropPiece(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.dropPiece', request);\n    }\n    async joinGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.joinGame', request);\n    }\n    async createGame(request: any): Promise<any> {\n        return this.parent.callMethod('connect4Service.createGame', request);\n    }\n}\n\n// Export the main client class\nexport default Multiplayer_connect4Client;","// Entry point for the games list page (/)\n// Handles game discovery, creation, and navigation\n\nimport Connect4Client from '../gen/wasmts/multiplayer_connect4Client.client';\n\n// Types for game storage\ninterface StoredGame {\n    gameId: string;\n    playerName: string;\n    lastPlayed: number;\n    gameStatus?: string;\n}\n\nclass GamesListManager {\n    private gamesContainer: HTMLElement | null = null;\n    private createForm: HTMLFormElement | null = null;\n    private connect4Client: Connect4Client | null = null;\n\n    constructor() {\n        this.init();\n    }\n\n    private async init(): Promise<void> {\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initializeUI());\n        } else {\n            this.initializeUI();\n        }\n    }\n\n    private initializeUI(): void {\n        this.gamesContainer = document.getElementById('gamesList');\n        this.createForm = document.getElementById('createGameForm') as HTMLFormElement;\n\n        if (this.createForm) {\n            this.createForm.addEventListener('submit', (e) => this.handleCreateGame(e));\n        }\n\n        this.loadExistingGames();\n        this.initializeWasmClient();\n    }\n\n    private async initializeWasmClient(): Promise<void> {\n        try {\n            console.log('Initializing WASM client for games list...');\n            this.connect4Client = new Connect4Client();\n            await this.connect4Client.loadWasm('/static/wasm/multiplayer_connect4.wasm');\n            await this.connect4Client.waitUntilReady();\n            console.log('WASM client ready for game operations');\n        } catch (error) {\n            console.error('Failed to initialize WASM client:', error);\n        }\n    }\n\n    private loadExistingGames(): void {\n        if (!this.gamesContainer) return;\n\n        const games = this.getStoredGames();\n        \n        if (games.length === 0) {\n            this.gamesContainer.innerHTML = `\n                <div class=\"no-games\">\n                    <p>No games found. Create your first game!</p>\n                </div>\n            `;\n            return;\n        }\n\n        this.gamesContainer.innerHTML = games.map(game => `\n            <div class=\"game-item\" data-game-id=\"${game.gameId}\">\n                <div class=\"game-info\">\n                    <h3>${game.gameId}</h3>\n                    <p>Player: ${game.playerName}</p>\n                    <p>Status: ${game.gameStatus || 'Unknown'}</p>\n                    <small>Last played: ${new Date(game.lastPlayed).toLocaleString()}</small>\n                </div>\n                <div class=\"game-actions\">\n                    <a href=\"/${game.gameId}\" class=\"btn\">Continue Game</a>\n                    <button class=\"btn btn-secondary\" onclick=\"gamesManager.removeGame('${game.gameId}')\">Remove</button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    private async handleCreateGame(event: Event): Promise<void> {\n        event.preventDefault();\n        \n        const formData = new FormData(event.target as HTMLFormElement);\n        const gameId = formData.get('gameId') as string;\n        const playerName = formData.get('playerName') as string;\n\n        if (!gameId || !playerName) {\n            alert('Please fill in all fields');\n            return;\n        }\n\n        try {\n            // Validate game ID format\n            if (!this.isValidGameId(gameId)) {\n                alert('Game ID can only contain letters, numbers, and hyphens');\n                return;\n            }\n\n            // Store the game locally\n            this.storeGame({\n                gameId,\n                playerName,\n                lastPlayed: Date.now(),\n                gameStatus: 'Created'\n            });\n\n            // Navigate to the game\n            window.location.href = `/${gameId}`;\n        } catch (error) {\n            console.error('Error creating game:', error);\n            alert('Failed to create game. Please try again.');\n        }\n    }\n\n    private getStoredGames(): StoredGame[] {\n        try {\n            const gamesData = localStorage.getItem('connect4Games');\n            return gamesData ? JSON.parse(gamesData) : [];\n        } catch (error) {\n            console.error('Error loading stored games:', error);\n            return [];\n        }\n    }\n\n    private storeGame(game: StoredGame): void {\n        try {\n            const games = this.getStoredGames();\n            const existingIndex = games.findIndex(g => g.gameId === game.gameId);\n            \n            if (existingIndex >= 0) {\n                games[existingIndex] = game;\n            } else {\n                games.push(game);\n            }\n            \n            localStorage.setItem('connect4Games', JSON.stringify(games));\n            this.loadExistingGames(); // Refresh the display\n        } catch (error) {\n            console.error('Error storing game:', error);\n        }\n    }\n\n    public removeGame(gameId: string): void {\n        try {\n            const games = this.getStoredGames();\n            const filteredGames = games.filter(g => g.gameId !== gameId);\n            localStorage.setItem('connect4Games', JSON.stringify(filteredGames));\n            this.loadExistingGames(); // Refresh the display\n        } catch (error) {\n            console.error('Error removing game:', error);\n        }\n    }\n\n    private isValidGameId(gameId: string): boolean {\n        if (!gameId || gameId.length === 0 || gameId.length > 50) {\n            return false;\n        }\n        \n        // Allow alphanumeric characters and hyphens\n        return /^[a-zA-Z0-9-]+$/.test(gameId);\n    }\n}\n\n// Initialize the games list manager\nconst gamesManager = new GamesListManager();\n\n// Make it globally available for HTML onclick handlers\n(window as any).gamesManager = gamesManager;\n\nexport default gamesManager;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","WasmError","Error","constructor","message","methodPath","super","name","Connect4ServiceClientImpl","parent","getGame","request","callMethod","dropPiece","joinGame","createGame","wasmLoadPromise","connect4Service","loadWasm","wasmPath","loadWASMModule","isReady","wasm","undefined","waitUntilReady","ensureWASMLoaded","jsonReq","JSON","parse","stringify","wasmResponse","getWasmMethod","wasmMethod","success","data","error","String","console","log","window","multiplayerConnect4","Go","script","document","createElement","src","head","appendChild","Promise","resolve","reject","onload","onerror","go","wasmModule","WebAssembly","instantiateStreaming","fetch","importObject","run","instance","parts","split","current","part","gamesManager","gamesContainer","createForm","connect4Client","init","readyState","addEventListener","initializeUI","getElementById","e","handleCreateGame","loadExistingGames","initializeWasmClient","games","getStoredGames","length","innerHTML","map","game","gameId","playerName","gameStatus","Date","lastPlayed","toLocaleString","join","event","preventDefault","formData","FormData","target","isValidGameId","alert","storeGame","now","location","href","gamesData","localStorage","getItem","existingIndex","findIndex","g","push","setItem","removeGame","filteredGames","filter","test"],"sourceRoot":""}