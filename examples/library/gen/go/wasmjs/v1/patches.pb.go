// Copyright 2025 Sri Panyam
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: wasmjs/v1/patches.proto

package wasmjsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Patch operations for modifying protobuf message fields
type PatchOperation int32

const (
	// Set a field value (scalar, message, or replace entire field)
	PatchOperation_SET PatchOperation = 0
	// Insert an item into a repeated field at a specific index
	PatchOperation_INSERT_LIST PatchOperation = 1
	// Remove an item from a repeated field at a specific index
	PatchOperation_REMOVE_LIST PatchOperation = 2
	// Move an item within a repeated field from one index to another
	PatchOperation_MOVE_LIST PatchOperation = 3
	// Insert or update a key-value pair in a map field
	PatchOperation_INSERT_MAP PatchOperation = 4
	// Remove a key-value pair from a map field
	PatchOperation_REMOVE_MAP PatchOperation = 5
	// Clear all items from a repeated field
	PatchOperation_CLEAR_LIST PatchOperation = 6
	// Clear all key-value pairs from a map field
	PatchOperation_CLEAR_MAP PatchOperation = 7
)

// Enum value maps for PatchOperation.
var (
	PatchOperation_name = map[int32]string{
		0: "SET",
		1: "INSERT_LIST",
		2: "REMOVE_LIST",
		3: "MOVE_LIST",
		4: "INSERT_MAP",
		5: "REMOVE_MAP",
		6: "CLEAR_LIST",
		7: "CLEAR_MAP",
	}
	PatchOperation_value = map[string]int32{
		"SET":         0,
		"INSERT_LIST": 1,
		"REMOVE_LIST": 2,
		"MOVE_LIST":   3,
		"INSERT_MAP":  4,
		"REMOVE_MAP":  5,
		"CLEAR_LIST":  6,
		"CLEAR_MAP":   7,
	}
)

func (x PatchOperation) Enum() *PatchOperation {
	p := new(PatchOperation)
	*p = x
	return p
}

func (x PatchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_wasmjs_v1_patches_proto_enumTypes[0].Descriptor()
}

func (PatchOperation) Type() protoreflect.EnumType {
	return &file_wasmjs_v1_patches_proto_enumTypes[0]
}

func (x PatchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchOperation.Descriptor instead.
func (PatchOperation) EnumDescriptor() ([]byte, []int) {
	return file_wasmjs_v1_patches_proto_rawDescGZIP(), []int{0}
}

// Source of patch changes
type PatchSource int32

const (
	// Changes originating from local user actions
	PatchSource_LOCAL PatchSource = 0
	// Changes from remote users via real-time sync
	PatchSource_REMOTE PatchSource = 1
	// Authoritative changes from the server
	PatchSource_SERVER PatchSource = 2
	// Changes loaded from persistent storage
	PatchSource_STORAGE PatchSource = 3
)

// Enum value maps for PatchSource.
var (
	PatchSource_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
		2: "SERVER",
		3: "STORAGE",
	}
	PatchSource_value = map[string]int32{
		"LOCAL":   0,
		"REMOTE":  1,
		"SERVER":  2,
		"STORAGE": 3,
	}
)

func (x PatchSource) Enum() *PatchSource {
	p := new(PatchSource)
	*p = x
	return p
}

func (x PatchSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchSource) Descriptor() protoreflect.EnumDescriptor {
	return file_wasmjs_v1_patches_proto_enumTypes[1].Descriptor()
}

func (PatchSource) Type() protoreflect.EnumType {
	return &file_wasmjs_v1_patches_proto_enumTypes[1]
}

func (x PatchSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchSource.Descriptor instead.
func (PatchSource) EnumDescriptor() ([]byte, []int) {
	return file_wasmjs_v1_patches_proto_rawDescGZIP(), []int{1}
}

// A single patch operation on a protobuf message field
type MessagePatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of operation to perform
	Operation PatchOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=wasmjs.v1.PatchOperation" json:"operation,omitempty"`
	// Path to the field being modified (e.g., "players[2].name", "places['tile_123'].latitude")
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// The new value to set (for SET, INSERT_LIST, INSERT_MAP operations)
	// Encoded as JSON for type flexibility
	ValueJson string `protobuf:"bytes,3,opt,name=value_json,json=valueJson,proto3" json:"value_json,omitempty"`
	// Index for list operations (INSERT_LIST, REMOVE_LIST, MOVE_LIST)
	Index int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// Map key for map operations (INSERT_MAP, REMOVE_MAP)
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// Source index for MOVE_LIST operations
	OldIndex int32 `protobuf:"varint,6,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	// Monotonically increasing change number for ordering
	ChangeNumber int64 `protobuf:"varint,7,opt,name=change_number,json=changeNumber,proto3" json:"change_number,omitempty"`
	// Timestamp when the change was created (microseconds since epoch)
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Optional user ID who made the change (for conflict resolution)
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional transaction ID to group related patches
	TransactionId string `protobuf:"bytes,10,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagePatch) Reset() {
	*x = MessagePatch{}
	mi := &file_wasmjs_v1_patches_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePatch) ProtoMessage() {}

func (x *MessagePatch) ProtoReflect() protoreflect.Message {
	mi := &file_wasmjs_v1_patches_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePatch.ProtoReflect.Descriptor instead.
func (*MessagePatch) Descriptor() ([]byte, []int) {
	return file_wasmjs_v1_patches_proto_rawDescGZIP(), []int{0}
}

func (x *MessagePatch) GetOperation() PatchOperation {
	if x != nil {
		return x.Operation
	}
	return PatchOperation_SET
}

func (x *MessagePatch) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *MessagePatch) GetValueJson() string {
	if x != nil {
		return x.ValueJson
	}
	return ""
}

func (x *MessagePatch) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MessagePatch) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MessagePatch) GetOldIndex() int32 {
	if x != nil {
		return x.OldIndex
	}
	return 0
}

func (x *MessagePatch) GetChangeNumber() int64 {
	if x != nil {
		return x.ChangeNumber
	}
	return 0
}

func (x *MessagePatch) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MessagePatch) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MessagePatch) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// A batch of patches applied to a single entity
type PatchBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fully qualified protobuf message type (e.g., "example.Game")
	MessageType string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The unique identifier of the entity being modified
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// List of patches to apply in order
	Patches []*MessagePatch `protobuf:"bytes,3,rep,name=patches,proto3" json:"patches,omitempty"`
	// The highest change number in this batch
	ChangeNumber int64 `protobuf:"varint,4,opt,name=change_number,json=changeNumber,proto3" json:"change_number,omitempty"`
	// Source of the changes
	Source PatchSource `protobuf:"varint,5,opt,name=source,proto3,enum=wasmjs.v1.PatchSource" json:"source,omitempty"`
	// Optional metadata about the batch
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchBatch) Reset() {
	*x = PatchBatch{}
	mi := &file_wasmjs_v1_patches_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchBatch) ProtoMessage() {}

func (x *PatchBatch) ProtoReflect() protoreflect.Message {
	mi := &file_wasmjs_v1_patches_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchBatch.ProtoReflect.Descriptor instead.
func (*PatchBatch) Descriptor() ([]byte, []int) {
	return file_wasmjs_v1_patches_proto_rawDescGZIP(), []int{1}
}

func (x *PatchBatch) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *PatchBatch) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *PatchBatch) GetPatches() []*MessagePatch {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *PatchBatch) GetChangeNumber() int64 {
	if x != nil {
		return x.ChangeNumber
	}
	return 0
}

func (x *PatchBatch) GetSource() PatchSource {
	if x != nil {
		return x.Source
	}
	return PatchSource_LOCAL
}

func (x *PatchBatch) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response message for methods that return patches
type PatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The patches to apply
	PatchBatches []*PatchBatch `protobuf:"bytes,1,rep,name=patch_batches,json=patchBatches,proto3" json:"patch_batches,omitempty"`
	// Success status
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if success is false
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The new change number after applying these patches
	NewChangeNumber int64 `protobuf:"varint,4,opt,name=new_change_number,json=newChangeNumber,proto3" json:"new_change_number,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PatchResponse) Reset() {
	*x = PatchResponse{}
	mi := &file_wasmjs_v1_patches_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResponse) ProtoMessage() {}

func (x *PatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wasmjs_v1_patches_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResponse.ProtoReflect.Descriptor instead.
func (*PatchResponse) Descriptor() ([]byte, []int) {
	return file_wasmjs_v1_patches_proto_rawDescGZIP(), []int{2}
}

func (x *PatchResponse) GetPatchBatches() []*PatchBatch {
	if x != nil {
		return x.PatchBatches
	}
	return nil
}

func (x *PatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PatchResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PatchResponse) GetNewChangeNumber() int64 {
	if x != nil {
		return x.NewChangeNumber
	}
	return 0
}

var File_wasmjs_v1_patches_proto protoreflect.FileDescriptor

const file_wasmjs_v1_patches_proto_rawDesc = "" +
	"\n" +
	"\x17wasmjs/v1/patches.proto\x12\twasmjs.v1\"\xcd\x02\n" +
	"\fMessagePatch\x127\n" +
	"\toperation\x18\x01 \x01(\x0e2\x19.wasmjs.v1.PatchOperationR\toperation\x12\x1d\n" +
	"\n" +
	"field_path\x18\x02 \x01(\tR\tfieldPath\x12\x1d\n" +
	"\n" +
	"value_json\x18\x03 \x01(\tR\tvalueJson\x12\x14\n" +
	"\x05index\x18\x04 \x01(\x05R\x05index\x12\x10\n" +
	"\x03key\x18\x05 \x01(\tR\x03key\x12\x1b\n" +
	"\told_index\x18\x06 \x01(\x05R\boldIndex\x12#\n" +
	"\rchange_number\x18\a \x01(\x03R\fchangeNumber\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12\x17\n" +
	"\auser_id\x18\t \x01(\tR\x06userId\x12%\n" +
	"\x0etransaction_id\x18\n" +
	" \x01(\tR\rtransactionId\"\xd2\x02\n" +
	"\n" +
	"PatchBatch\x12!\n" +
	"\fmessage_type\x18\x01 \x01(\tR\vmessageType\x12\x1b\n" +
	"\tentity_id\x18\x02 \x01(\tR\bentityId\x121\n" +
	"\apatches\x18\x03 \x03(\v2\x17.wasmjs.v1.MessagePatchR\apatches\x12#\n" +
	"\rchange_number\x18\x04 \x01(\x03R\fchangeNumber\x12.\n" +
	"\x06source\x18\x05 \x01(\x0e2\x16.wasmjs.v1.PatchSourceR\x06source\x12?\n" +
	"\bmetadata\x18\x06 \x03(\v2#.wasmjs.v1.PatchBatch.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x01\n" +
	"\rPatchResponse\x12:\n" +
	"\rpatch_batches\x18\x01 \x03(\v2\x15.wasmjs.v1.PatchBatchR\fpatchBatches\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12*\n" +
	"\x11new_change_number\x18\x04 \x01(\x03R\x0fnewChangeNumber*\x89\x01\n" +
	"\x0ePatchOperation\x12\a\n" +
	"\x03SET\x10\x00\x12\x0f\n" +
	"\vINSERT_LIST\x10\x01\x12\x0f\n" +
	"\vREMOVE_LIST\x10\x02\x12\r\n" +
	"\tMOVE_LIST\x10\x03\x12\x0e\n" +
	"\n" +
	"INSERT_MAP\x10\x04\x12\x0e\n" +
	"\n" +
	"REMOVE_MAP\x10\x05\x12\x0e\n" +
	"\n" +
	"CLEAR_LIST\x10\x06\x12\r\n" +
	"\tCLEAR_MAP\x10\a*=\n" +
	"\vPatchSource\x12\t\n" +
	"\x05LOCAL\x10\x00\x12\n" +
	"\n" +
	"\x06REMOTE\x10\x01\x12\n" +
	"\n" +
	"\x06SERVER\x10\x02\x12\v\n" +
	"\aSTORAGE\x10\x03B\xb5\x01\n" +
	"\rcom.wasmjs.v1B\fPatchesProtoP\x01ZQgithub.com/panyam/protoc-gen-go-wasmjs/examples/library/gen/go/wasmjs/v1;wasmjsv1\xa2\x02\x03WXX\xaa\x02\tWasmjs.V1\xca\x02\tWasmjs\\V1\xe2\x02\x15Wasmjs\\V1\\GPBMetadata\xea\x02\n" +
	"Wasmjs::V1b\x06proto3"

var (
	file_wasmjs_v1_patches_proto_rawDescOnce sync.Once
	file_wasmjs_v1_patches_proto_rawDescData []byte
)

func file_wasmjs_v1_patches_proto_rawDescGZIP() []byte {
	file_wasmjs_v1_patches_proto_rawDescOnce.Do(func() {
		file_wasmjs_v1_patches_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wasmjs_v1_patches_proto_rawDesc), len(file_wasmjs_v1_patches_proto_rawDesc)))
	})
	return file_wasmjs_v1_patches_proto_rawDescData
}

var file_wasmjs_v1_patches_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wasmjs_v1_patches_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_wasmjs_v1_patches_proto_goTypes = []any{
	(PatchOperation)(0),   // 0: wasmjs.v1.PatchOperation
	(PatchSource)(0),      // 1: wasmjs.v1.PatchSource
	(*MessagePatch)(nil),  // 2: wasmjs.v1.MessagePatch
	(*PatchBatch)(nil),    // 3: wasmjs.v1.PatchBatch
	(*PatchResponse)(nil), // 4: wasmjs.v1.PatchResponse
	nil,                   // 5: wasmjs.v1.PatchBatch.MetadataEntry
}
var file_wasmjs_v1_patches_proto_depIdxs = []int32{
	0, // 0: wasmjs.v1.MessagePatch.operation:type_name -> wasmjs.v1.PatchOperation
	2, // 1: wasmjs.v1.PatchBatch.patches:type_name -> wasmjs.v1.MessagePatch
	1, // 2: wasmjs.v1.PatchBatch.source:type_name -> wasmjs.v1.PatchSource
	5, // 3: wasmjs.v1.PatchBatch.metadata:type_name -> wasmjs.v1.PatchBatch.MetadataEntry
	3, // 4: wasmjs.v1.PatchResponse.patch_batches:type_name -> wasmjs.v1.PatchBatch
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_wasmjs_v1_patches_proto_init() }
func file_wasmjs_v1_patches_proto_init() {
	if File_wasmjs_v1_patches_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wasmjs_v1_patches_proto_rawDesc), len(file_wasmjs_v1_patches_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wasmjs_v1_patches_proto_goTypes,
		DependencyIndexes: file_wasmjs_v1_patches_proto_depIdxs,
		EnumInfos:         file_wasmjs_v1_patches_proto_enumTypes,
		MessageInfos:      file_wasmjs_v1_patches_proto_msgTypes,
	}.Build()
	File_wasmjs_v1_patches_proto = out.File
	file_wasmjs_v1_patches_proto_goTypes = nil
	file_wasmjs_v1_patches_proto_depIdxs = nil
}
