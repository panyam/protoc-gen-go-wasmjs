//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: library/v2/analytics.proto

package library_all_services

import (
	"context"
	"encoding/json"
	"fmt"
	"syscall/js"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	libraryv2 "github.com/panyam/protoc-gen-go-wasmjs/examples/library/gen/go/library/v2"
)

// Library_all_servicesServicesExports provides WASM exports for dependency injection
type Library_all_servicesServicesExports struct {
	AnalyticsService libraryv2.AnalyticsServiceServer
	LibraryService   libraryv2.LibraryServiceServer
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *Library_all_servicesServicesExports) RegisterAPI() {
	fmt.Println("library_all_services WASM module loading...")
	// Create namespaced API structure
	library := map[string]interface{}{
		"analyticsService": map[string]interface{}{
			"getBookStats": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.analyticsServiceGetBookStats(this, args)
			}),
		},
		"libraryService": map[string]interface{}{
			"findBooks": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.libraryServiceFindBooks(this, args)
			}),
		},
	}
	js.Global().Set("library", js.ValueOf(library))

	fmt.Println("library_all_services WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

// analyticsServiceGetBookStats handles the GetBookStats method for AnalyticsService
func (exports *Library_all_servicesServicesExports) analyticsServiceGetBookStats(this js.Value, args []js.Value) any {
	if exports.AnalyticsService == nil {
		return createJSResponse(false, "AnalyticsService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &libraryv2.GetBookStatsRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.AnalyticsService.GetBookStats(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: false, // Don't emit zero values
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// libraryServiceFindBooks handles the FindBooks method for LibraryService
func (exports *Library_all_servicesServicesExports) libraryServiceFindBooks(this js.Value, args []js.Value) any {
	if exports.LibraryService == nil {
		return createJSResponse(false, "LibraryService not initialized", nil)
	}

	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &libraryv2.FindBooksRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.LibraryService.FindBooks(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: false, // Don't emit zero values
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse creates a JavaScript-compatible response
func createJSResponse(success bool, message string, data any) any {
	response := map[string]any{
		"success": success,
		"message": message,
		"data":    data,
	}

	// Convert to JS Value
	responseBytes, err := json.Marshal(response)
	if err != nil {
		fmt.Printf("Failed to marshal JSON response: %v\n", err)
		// Return a simple error response
		errorResponse := map[string]any{
			"success": false,
			"message": fmt.Sprintf("JSON marshal error: %v", err),
			"data":    nil,
		}
		errorBytes, _ := json.Marshal(errorResponse)
		return js.Global().Get("JSON").Call("parse", string(errorBytes))
	}

	return js.Global().Get("JSON").Call("parse", string(responseBytes))
}
