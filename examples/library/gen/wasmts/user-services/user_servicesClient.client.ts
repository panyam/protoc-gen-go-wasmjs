// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: library/v1/library.proto

/**
 * WASM Response interface for all service calls
 */
export interface WASMResponse<T = any> {
    success: boolean;
    message: string;
    data: T;
}

/**
 * Error class for WASM-specific errors
 */
export class WasmError extends Error {
    constructor(message: string, public readonly methodPath?: string) {
        super(message);
        this.name = 'WasmError';
    }
}
/**
 * UserService service client interface
 * Uses any types since we generate our own TypeScript interfaces
 */
export interface UserServiceMethods {
	getUser(request: any): Promise<any>;
	createUser(request: any): Promise<any>;
}

/**
 * user_services WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class User_servicesClient {
    private wasm: any;
    private wasmLoadPromise: Promise<void> | null = null;

    // Service-specific clients
    public readonly userService: UserServiceClientImpl;

    constructor() {
        this.userService = new UserServiceClientImpl(this);
    }

    /**
     * Load the WASM module asynchronously
     */
    public async loadWasm(wasmPath: string = './user_services.wasm'): Promise<void> {
        if (this.wasmLoadPromise) {
            return this.wasmLoadPromise;
        }

        this.wasmLoadPromise = this.loadWASMModule(wasmPath);
        return this.wasmLoadPromise;
    }

    /**
     * Check if WASM is ready for operations
     */
    public isReady(): boolean {
        return this.wasm !== null && this.wasm !== undefined;
    }

    /**
     * Wait for WASM to be ready (use during initialization)
     */
    public async waitUntilReady(): Promise<void> {
        if (!this.wasmLoadPromise) {
            throw new Error('WASM loading not started. Call loadWasm() first.');
        }
        await this.wasmLoadPromise;
    }

    /**
     * Internal method to call WASM functions with JSON conversion
     */
    public callMethod<TRequest, TResponse>(
        methodPath: string,
        request: TRequest
    ): Promise<TResponse> {
        this.ensureWASMLoaded();

        try {
            // Convert request to JSON
            const jsonReq = JSON.parse(JSON.stringify(request));
            const wasmMethod = this.getWasmMethod(methodPath);
            const wasmResponse = wasmMethod(JSON.stringify(jsonReq));

            if (!wasmResponse.success) {
                throw new WasmError(wasmResponse.message, methodPath);
            }

            // Return response data directly
            return wasmResponse.data;
        } catch (error) {
            if (error instanceof WasmError) {
                throw error;
            }
            throw new WasmError(
                `Call error: ${error instanceof Error ? error.message : String(error)}`,
                methodPath
            );
        }
    }

    /**
     * Internal method to call async WASM functions with callback
     */
    public callMethodWithCallback<TRequest>(
        methodPath: string,
        request: TRequest,
        callback: (response: any, error?: string) => void
    ): Promise<void> {
        this.ensureWASMLoaded();

        try {
            // Convert request to JSON
            const jsonReq = JSON.parse(JSON.stringify(request));
            const wasmMethod = this.getWasmMethod(methodPath);
            
            // Call WASM method with callback function
            const wasmResponse = wasmMethod(JSON.stringify(jsonReq), callback);

            if (!wasmResponse.success) {
                throw new WasmError(wasmResponse.message, methodPath);
            }

            // Async methods return immediately
            return Promise.resolve();
        } catch (error) {
            if (error instanceof WasmError) {
                throw error;
            }
            throw new WasmError(
                `Call error: ${error instanceof Error ? error.message : String(error)}`,
                methodPath
            );
        }
    }

    /**
     * Internal method to call server streaming WASM functions
     */
    public callStreamingMethod<TRequest, TResponse>(
        methodPath: string,
        request: TRequest,
        callback: (response: TResponse | null, error: string | null, done: boolean) => boolean
    ): void {
        this.ensureWASMLoaded();

        try {
            // Convert request to JSON
            const jsonReq = JSON.parse(JSON.stringify(request));
            const wasmMethod = this.getWasmMethod(methodPath);
            
            // Call WASM streaming method with callback function
            const wasmResponse = wasmMethod(JSON.stringify(jsonReq), callback);

            if (!wasmResponse.success) {
                throw new WasmError(wasmResponse.message, methodPath);
            }

            // Streaming methods return immediately
        } catch (error) {
            if (error instanceof WasmError) {
                throw error;
            }
            throw new WasmError(
                `Streaming call error: ${error instanceof Error ? error.message : String(error)}`,
                methodPath
            );
        }
    }

    /**
     * Load the WASM module implementation
     */
    private async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading user_services WASM module...');

        // Check if WASM is already loaded (for testing environments)
        if ((window as any).userModule) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).userModule;
            return;
        }

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/static/wasm/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Verify WASM APIs are available
        if (!(window as any).userModule) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).userModule;

        console.log('user_services WASM module loaded successfully');
    }

    /**
     * Ensure WASM module is loaded (synchronous version for service calls)
     */
    private ensureWASMLoaded(): void {
        if (!this.isReady()) {
            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');
        }
    }

    /**
     * Get WASM method function by path
     */
    private getWasmMethod(methodPath: string): Function {
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
    }
}
/**
 * UserService service client implementation
 */
class UserServiceClientImpl implements UserServiceMethods {
    constructor(private parent: User_servicesClient) {}
    async getUser(request: any): Promise<any> {
        return this.parent.callMethod('userService.getUser', request);
    }
    async createUser(request: any): Promise<any> {
        return this.parent.callMethod('userService.createUser', request);
    }
}

// Export the main client class
export default User_servicesClient;