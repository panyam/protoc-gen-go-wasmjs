// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: streaming/v1/streaming.proto

package streamingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TickService_GetTicks_FullMethodName      = "/streaming.v1.TickService/GetTicks"
	TickService_GetSingleTick_FullMethodName = "/streaming.v1.TickService/GetSingleTick"
)

// TickServiceClient is the client API for TickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service with server streaming method
type TickServiceClient interface {
	// Server streaming: sends multiple responses for one request
	GetTicks(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TickResponse], error)
	// Regular unary method for comparison
	GetSingleTick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error)
}

type tickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTickServiceClient(cc grpc.ClientConnInterface) TickServiceClient {
	return &tickServiceClient{cc}
}

func (c *tickServiceClient) GetTicks(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TickResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TickService_ServiceDesc.Streams[0], TickService_GetTicks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TickRequest, TickResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TickService_GetTicksClient = grpc.ServerStreamingClient[TickResponse]

func (c *tickServiceClient) GetSingleTick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TickResponse)
	err := c.cc.Invoke(ctx, TickService_GetSingleTick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickServiceServer is the server API for TickService service.
// All implementations must embed UnimplementedTickServiceServer
// for forward compatibility.
//
// Service with server streaming method
type TickServiceServer interface {
	// Server streaming: sends multiple responses for one request
	GetTicks(*TickRequest, grpc.ServerStreamingServer[TickResponse]) error
	// Regular unary method for comparison
	GetSingleTick(context.Context, *TickRequest) (*TickResponse, error)
	mustEmbedUnimplementedTickServiceServer()
}

// UnimplementedTickServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTickServiceServer struct{}

func (UnimplementedTickServiceServer) GetTicks(*TickRequest, grpc.ServerStreamingServer[TickResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTicks not implemented")
}
func (UnimplementedTickServiceServer) GetSingleTick(context.Context, *TickRequest) (*TickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTick not implemented")
}
func (UnimplementedTickServiceServer) mustEmbedUnimplementedTickServiceServer() {}
func (UnimplementedTickServiceServer) testEmbeddedByValue()                     {}

// UnsafeTickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickServiceServer will
// result in compilation errors.
type UnsafeTickServiceServer interface {
	mustEmbedUnimplementedTickServiceServer()
}

func RegisterTickServiceServer(s grpc.ServiceRegistrar, srv TickServiceServer) {
	// If the following call pancis, it indicates UnimplementedTickServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TickService_ServiceDesc, srv)
}

func _TickService_GetTicks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickServiceServer).GetTicks(m, &grpc.GenericServerStream[TickRequest, TickResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TickService_GetTicksServer = grpc.ServerStreamingServer[TickResponse]

func _TickService_GetSingleTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickServiceServer).GetSingleTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickService_GetSingleTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickServiceServer).GetSingleTick(ctx, req.(*TickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickService_ServiceDesc is the grpc.ServiceDesc for TickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.v1.TickService",
	HandlerType: (*TickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSingleTick",
			Handler:    _TickService_GetSingleTick_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTicks",
			Handler:       _TickService_GetTicks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streaming/v1/streaming.proto",
}
