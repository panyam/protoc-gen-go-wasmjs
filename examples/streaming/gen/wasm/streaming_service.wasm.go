//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: streaming/v1/streaming.proto

package streaming_service

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"syscall/js"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	streamingv1 "github.com/panyam/protoc-gen-go-wasmjs/examples/streaming/gen/go/streaming/v1"
)

// Streaming_serviceServicesExports provides WASM exports for dependency injection
type Streaming_serviceServicesExports struct {
	TickService streamingv1.TickServiceServer
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *Streaming_serviceServicesExports) RegisterAPI() {
	fmt.Println("streaming_service WASM module loading...")
	// Create namespaced API structure
	streamingService := map[string]interface{}{
		"tickService": map[string]interface{}{
			"getTicks": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.tickServiceGetTicks(this, args)
			}),
			"getSingleTick": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.tickServiceGetSingleTick(this, args)
			}),
		},
	}
	js.Global().Set("streamingService", js.ValueOf(streamingService))

	fmt.Println("streaming_service WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

// tickServiceGetTicks handles the GetTicks method for TickService
func (exports *Streaming_serviceServicesExports) tickServiceGetTicks(this js.Value, args []js.Value) any {
	if exports.TickService == nil {
		return createJSResponse(false, "TickService not initialized", nil)
	}
	// Server streaming method: expect request JSON and callback function
	if len(args) < 2 {
		return createJSResponse(false, "Request JSON and callback function required for streaming method", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	callback := args[1]
	if callback.Type() != js.TypeFunction {
		return createJSResponse(false, "Second argument must be a callback function", nil)
	}

	// Parse request
	req := &streamingv1.TickRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true,
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Start streaming in goroutine to avoid blocking
	go func() {
		ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
		defer cancel()

		// Call streaming service method
		stream, err := exports.TickService.GetTicks(ctx, req)
		if err != nil {
			// Call callback with error and done=true
			callback.Invoke(js.Null(), err.Error(), true)
			return
		}

		// Stream responses until done
		for {
			resp, err := stream.Recv()
			if err == io.EOF {
				// Stream completed successfully - signal done with no error
				callback.Invoke(js.Null(), js.Null(), true)
				break
			}
			if err != nil {
				// Stream error - signal done with error
				callback.Invoke(js.Null(), err.Error(), true)
				break
			}

			// Marshal and send response
			marshalOpts := protojson.MarshalOptions{
				UseProtoNames:   false,
				EmitUnpopulated: false,
				UseEnumNumbers:  false,
			}
			responseJSON, err := marshalOpts.Marshal(resp)
			if err != nil {
				callback.Invoke(js.Null(), fmt.Sprintf("Failed to marshal response: %v", err), true)
				break
			}

			// Call callback with response, no error, not done - returns boolean to continue
			shouldContinue := callback.Invoke(string(responseJSON), js.Null(), false)

			// Check if JS wants to stop the stream
			if !shouldContinue.Bool() {
				break
			}
		}
	}()

	// Return immediately for streaming methods
	return createJSResponse(true, "Server streaming started", nil)
}

// tickServiceGetSingleTick handles the GetSingleTick method for TickService
func (exports *Streaming_serviceServicesExports) tickServiceGetSingleTick(this js.Value, args []js.Value) any {
	if exports.TickService == nil {
		return createJSResponse(false, "TickService not initialized", nil)
	}
	// Synchronous method
	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &streamingv1.TickRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.TickService.GetSingleTick(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: false, // Don't emit zero values
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse creates a JavaScript-compatible response
func createJSResponse(success bool, message string, data any) any {
	response := map[string]any{
		"success": success,
		"message": message,
		"data":    data,
	}

	// Convert to JS Value
	responseBytes, err := json.Marshal(response)
	if err != nil {
		fmt.Printf("Failed to marshal JSON response: %v\n", err)
		// Return a simple error response
		errorResponse := map[string]any{
			"success": false,
			"message": fmt.Sprintf("JSON marshal error: %v", err),
			"data":    nil,
		}
		errorBytes, _ := json.Marshal(errorResponse)
		return js.Global().Get("JSON").Call("parse", string(errorBytes))
	}

	return js.Global().Get("JSON").Call("parse", string(responseBytes))
}
