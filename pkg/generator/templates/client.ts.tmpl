// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: {{ .SourcePath }}

{{- range .TSImports }}
import {
	{{- $first := true }}
	{{- range .Types }}
		{{- if not $first }}, {{ end }}
		{{ . }}
		{{- $first = false }}
	{{- end }}
} from '{{ .ImportPath }}';
{{- end }}

/**
 * WASM Response interface for all service calls
 */
export interface WASMResponse<T = any> {
    success: boolean;
    message: string;
    data: T;
}

/**
 * Error class for WASM-specific errors
 */
export class WasmError extends Error {
    constructor(message: string, public readonly methodPath?: string) {
        super(message);
        this.name = 'WasmError';
    }
}

{{- range .Services }}
/**
 * {{ .Name }} service client interface
 */
export interface {{ .Name }}Methods {
	{{- range .Methods }}
		{{- if .ShouldGenerate }}
	{{ .JSName }}(request: {{ .RequestTSType }}): Promise<{{ .ResponseTSType }}>;
		{{- end }}
	{{- end }}
}
{{- end }}

/**
 * {{ .ModuleName }} WASM client
 * Provides a clean interface between UI components and the Go WASM service implementations
 */
export class {{ .ModuleName | title }}Client {
    private wasm: any;
    private wasmLoadPromise: Promise<void> | null = null;

    // Service-specific clients
{{- range .Services }}
    public readonly {{ .JSName }}: {{ .Name }}ClientImpl;
{{- end }}

    constructor() {
{{- range .Services }}
        this.{{ .JSName }} = new {{ .Name }}ClientImpl(this);
{{- end }}
    }

    /**
     * Load the WASM module asynchronously
     */
    public async loadWasm(wasmPath: string = './{{ .ModuleName }}.wasm'): Promise<void> {
        if (this.wasmLoadPromise) {
            return this.wasmLoadPromise;
        }

        this.wasmLoadPromise = this.loadWASMModule(wasmPath);
        return this.wasmLoadPromise;
    }

    /**
     * Check if WASM is ready for operations
     */
    public isReady(): boolean {
        return this.wasm !== null && this.wasm !== undefined;
    }

    /**
     * Wait for WASM to be ready (use during initialization)
     */
    public async waitUntilReady(): Promise<void> {
        if (!this.wasmLoadPromise) {
            throw new Error('WASM loading not started. Call loadWasm() first.');
        }
        await this.wasmLoadPromise;
    }

    /**
     * Internal method to call WASM functions with type conversion
     */
    public callMethod<TRequest, TResponse>(
        methodPath: string,
        request: TRequest
    ): Promise<TResponse> {
        this.ensureWASMLoaded();

        // Auto-detect conversion methods based on TS generator
        const toJson = this.detectToJson(request);
        const fromJson = this.detectFromJson((request as any).constructor);

        const jsonReq = toJson(request);
        const wasmMethod = this.getWasmMethod(methodPath);
        const wasmResponse = wasmMethod(JSON.stringify(jsonReq));

        if (!wasmResponse.success) {
            throw new WasmError(wasmResponse.message, methodPath);
        }

        return fromJson(wasmResponse.data);
    }

    /**
     * Load the WASM module implementation
     */
    private async loadWASMModule(wasmPath: string): Promise<void> {
        console.log('Loading {{ .ModuleName }} WASM module...');

        // Check if WASM is already loaded (for testing environments) 
{{- if eq .APIStructure "namespaced" }}
        if ((window as any).{{ .JSNamespace }}) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).{{ .JSNamespace }};
            return;
        }
{{- else if eq .APIStructure "flat" }}
        // Check for any flat function to determine if loaded
        {{- $firstService := index .Services 0 }}
        {{- $firstMethod := index $firstService.Methods 0 }}
        if ((window as any).{{ .JSNamespace }}{{ $firstMethod.Name }}) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = window as any;
            return;
        }
{{- else if eq .APIStructure "service_based" }}
        if ((window as any).services) {
            console.log('WASM module already loaded (pre-loaded in test environment)');
            this.wasm = (window as any).services;
            return;
        }
{{- end }}

        // Load Go's WASM support
        if (!(window as any).Go) {
            const script = document.createElement('script');
            script.src = '/static/wasm/wasm_exec.js';
            document.head.appendChild(script);

            await new Promise<void>((resolve, reject) => {
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Failed to load wasm_exec.js'));
            });
        }

        // Initialize Go WASM runtime
        const go = new (window as any).Go();
        const wasmModule = await WebAssembly.instantiateStreaming(
            fetch(wasmPath),
            go.importObject
        );

        // Run the WASM module
        go.run(wasmModule.instance);

        // Verify WASM APIs are available
{{- if eq .APIStructure "namespaced" }}
        if (!(window as any).{{ .JSNamespace }}) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).{{ .JSNamespace }};
{{- else if eq .APIStructure "flat" }}
        {{- $firstService := index .Services 0 }}
        {{- $firstMethod := index $firstService.Methods 0 }}
        if (!(window as any).{{ .JSNamespace }}{{ $firstMethod.Name }}) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = window as any;
{{- else if eq .APIStructure "service_based" }}
        if (!(window as any).services) {
            throw new Error('WASM APIs not found - module may not have loaded correctly');
        }
        this.wasm = (window as any).services;
{{- end }}

        console.log('{{ .ModuleName }} WASM module loaded successfully');
    }

    /**
     * Ensure WASM module is loaded (synchronous version for service calls)
     */
    private ensureWASMLoaded(): void {
        if (!this.isReady()) {
            throw new Error('WASM module not loaded. Call loadWasm() and waitUntilReady() first.');
        }
    }

    /**
     * Get WASM method function by path
     */
    private getWasmMethod(methodPath: string): Function {
{{- if eq .APIStructure "namespaced" }}
        // Handle namespaced structure: namespace.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
{{- else if eq .APIStructure "flat" }}
        // Handle flat structure: direct method name
        const method = this.wasm[methodPath];
        if (!method) {
            throw new Error(`Method not found: ${methodPath}`);
        }
        return method;
{{- else if eq .APIStructure "service_based" }}
        // Handle service-based structure: services.service.method
        const parts = methodPath.split('.');
        let current = this.wasm;
        for (const part of parts) {
            current = current[part];
            if (!current) {
                throw new Error(`Method not found: ${methodPath}`);
            }
        }
        return current;
{{- end }}
    }

    /**
     * Auto-detect toJson conversion method
     */
    private detectToJson(request: any): (req: any) => any {
{{- if eq .Config.TSGenerator "protoc-gen-es" }}
        return (request as any).toJson || 
               (request as any).toJSON || 
               ((r: any) => {
                 // Handle BigInt serialization for protobuf-es objects
                 return JSON.parse(JSON.stringify(r, (key, value) => {
                     return typeof value === 'bigint' ? value.toString() : value;
                 }));
             });
{{- else if eq .Config.TSGenerator "protoc-gen-ts" }}
        return (request as any).toJSON || 
               (request as any).toJson || 
               ((r: any) => {
                 // Handle BigInt serialization for protobuf-es objects
                 return JSON.parse(JSON.stringify(r, (key, value) => {
                     return typeof value === 'bigint' ? value.toString() : value;
                 }));
             });
{{- else }}
        // Generic fallback
        return (request as any).toJson || 
               (request as any).toJSON || 
               ((r: any) => {
                 // Handle BigInt serialization for protobuf-es objects
                 return JSON.parse(JSON.stringify(r, (key, value) => {
                     return typeof value === 'bigint' ? value.toString() : value;
                 }));
             });
{{- end }}
    }

    /**
     * Auto-detect fromJson conversion method
     */
    private detectFromJson(constructor: any): (json: any) => any {
{{- if eq .Config.TSGenerator "protoc-gen-es" }}
        return constructor.fromJson || 
               constructor.fromJSON || 
               ((j: any) => {
                 // Handle BigInt deserialization
                 if (j && typeof j === 'object') {
                     const result = { ...j };
                     if (typeof result.sequenceNum === 'string' && /^\d+$/.test(result.sequenceNum)) {
                         result.sequenceNum = BigInt(result.sequenceNum);
                     }
                     return result;
                 }
                 return j;
             });
{{- else if eq .Config.TSGenerator "protoc-gen-ts" }}
        return constructor.fromJSON || 
               constructor.fromJson || 
               ((j: any) => {
                 // Handle BigInt deserialization
                 if (j && typeof j === 'object') {
                     const result = { ...j };
                     if (typeof result.sequenceNum === 'string' && /^\d+$/.test(result.sequenceNum)) {
                         result.sequenceNum = BigInt(result.sequenceNum);
                     }
                     return result;
                 }
                 return j;
             });
{{- else }}
        // Generic fallback
        return constructor.fromJson || 
               constructor.fromJSON || 
               ((j: any) => {
                 // Handle BigInt deserialization
                 if (j && typeof j === 'object') {
                     const result = { ...j };
                     if (typeof result.sequenceNum === 'string' && /^\d+$/.test(result.sequenceNum)) {
                         result.sequenceNum = BigInt(result.sequenceNum);
                     }
                     return result;
                 }
                 return j;
             });

{{- end }}
    }
}

{{- range .Services }}
	{{- $serviceName := .Name }}
	{{- $serviceJSName := .JSName }}
/**
 * {{ .Name }} service client implementation
 */
class {{ .Name }}ClientImpl implements {{ .Name }}Methods {
    constructor(private parent: {{ $.ModuleName | title }}Client) {}

	{{- range .Methods }}
		{{- if .ShouldGenerate }}
    async {{ .JSName }}(request: {{ .Name }}Request): Promise<{{ .Name }}Response> {
		{{- if eq $.APIStructure "namespaced" }}
        return this.parent.callMethod('{{ $serviceJSName }}.{{ .JSName }}', request);
		{{- else if eq $.APIStructure "flat" }}
        return this.parent.callMethod('{{ $.JSNamespace }}{{ .Name }}', request);
		{{- else if eq $.APIStructure "service_based" }}
        return this.parent.callMethod('{{ $serviceJSName }}.{{ .JSName }}', request);
		{{- end }}
    }
		{{- end }}
	{{- end }}
}
{{- end }}

// Export the main client class
export default {{ .ModuleName | title }}Client;
