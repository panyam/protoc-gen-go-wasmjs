{{/* Import all interfaces */}}
{{range $file, $messages := .ImportsByFile}}import { {{range $i, $iface := $messages}}{{if $i}}, {{end}}{{$iface}}{{end}} } from "./{{$file}}_interfaces";
{{end}}
{{/* Import all models */}}
{{range $file, $models := .ModelImportsByFile}}import { {{range $i, $model := $models}}{{if $i}}, {{end}}{{$model}}{{end}} } from "./{{$file}}_models";
{{end}}
{{/* Import dependency factories */}}
{{range .Dependencies}}import { {{.FactoryName}} } from "{{.ImportPath}}";
{{end}}

/**
 * Factory result interface for enhanced factory methods
 */
export interface FactoryResult<T> {
  instance: T;
  fullyLoaded: boolean;
}

/**
 * Enhanced factory with context-aware object construction
 */
export class {{.FactoryName}} {
{{range .Dependencies}}  // Dependency factory for {{.PackageName}} package
  private {{.InstanceName}} = new {{.FactoryName}}();
{{end}}

{{range .Messages}}  /**
   * Enhanced factory method for {{.TSName}}
   * @param parent Parent object containing this field
   * @param attributeName Field name in parent object
   * @param attributeKey Array index, map key, or union tag (for containers)
   * @param data Raw data to potentially populate from
   * @returns Factory result with instance and population status
   */
  {{.MethodName}} = (
    parent?: any,
    attributeName?: string,
    attributeKey?: string | number,
    data?: any
  ): FactoryResult<{{.TSName}}Interface> => {
    const out = new Concrete{{.TSName}}();
    
    // Factory does not populate by default - let deserializer handle it
    return { instance: out, fullyLoaded: false };
  }

{{end}}

  /**
   * Get factory method for a fully qualified message type
   * Enables cross-package factory delegation
   */
  getFactoryMethod(messageType: string): ((parent?: any, attributeName?: string, attributeKey?: string | number, data?: any) => FactoryResult<any>) | undefined {
    // Extract package from message type (e.g., "library.common.BaseMessage" -> "library.common")
    const parts = messageType.split('.');
    if (parts.length < 2) {
      return undefined;
    }
    
    const packageName = parts.slice(0, -1).join('.');
    const typeName = parts[parts.length - 1];
    const methodName = 'new' + typeName;
    
    // Check if this is our own package first
    const currentPackage = "{{range .Messages}}{{.PackageName}}{{break}}{{end}}";
    if (packageName === currentPackage) {
      return this[methodName];
    }
    
    // Delegate to appropriate dependency factory
{{range .Dependencies}}    if (packageName === "{{.PackageName}}") {
      return this.{{.InstanceName}}[methodName];
    }
{{end}}
    
    return undefined;
  }

{{/* Legacy factory methods for backward compatibility - currently disabled
{{range .Messages}}  {{.MethodName}}Legacy = (data?: any): {{.TSName}}Interface => {
    const result = this.{{.MethodName}}(undefined, undefined, undefined, data);
    return result.fullyLoaded ? result.instance : this.deserializeObject(result.instance, data);
  }

{{end}}
*/}}

  /**
   * Generic object deserializer that respects factory decisions
   */
  protected deserializeObject(instance: any, data: any): any {
    if (!data || typeof data !== 'object') return instance;
    
    for (const [key, value] of Object.entries(data)) {
      if (value !== null && value !== undefined) {
        instance[key] = value;
      }
    }
    return instance;
  }
}
