// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// Bundle for module: {{ .ModuleName }}

import { WASMBundle, WASMBundleConfig, ServiceClient } from '@protoc-gen-go-wasmjs/runtime';

// Import all service clients for this module
{{- range .Services }}
import { {{ .Name }}ServiceClient } from './{{ .PackagePath }}/{{ .FileName }}';
{{- end }}

// Import browser service interfaces (for type hints in registerBrowserService)
{{- range .BrowserServices }}
import { {{ .Name }}Server } from './{{ .PackagePath }}/{{ .FileName }}';
{{- end }}

/**
 * {{ .ModuleName }} WASM bundle - manages shared WASM module
 * One bundle per WASM file, shared by multiple service clients
 */
export class {{ .ModuleName | title }}Bundle {
    private _wasmBundle: WASMBundle;
    
    // Expose wasmBundle for manual service client creation (temporary workaround)
    public get wasmBundle(): WASMBundle {
        return this._wasmBundle;
    }

    // Service clients that share this bundle
{{- range .Services }}
    public readonly {{ .JSName }}: {{ .Name }}ServiceClient;
{{- end }}

    constructor() {
        const config: WASMBundleConfig = {
            moduleName: '{{ .ModuleName }}',
            apiStructure: '{{ .APIStructure }}',
            jsNamespace: '{{ .JSNamespace }}'
        };

        this._wasmBundle = new WASMBundle(config);

        // Initialize service clients with shared bundle
{{- range .Services }}
        this.{{ .JSName }} = new {{ .Name }}ServiceClient(this._wasmBundle);
{{- end }}
    }

    /**
     * Register a browser service implementation
     */
    public registerBrowserService(name: string, implementation: any): void {
        this._wasmBundle.registerBrowserService(name, implementation);
    }

    /**
     * Load the WASM module asynchronously (singleton pattern)
     */
    public async loadWasm(wasmPath: string): Promise<void> {
        return this._wasmBundle.loadWasm(wasmPath);
    }

    /**
     * Check if WASM bundle is ready for operations
     */
    public isReady(): boolean {
        return this._wasmBundle.isReady();
    }

    /**
     * Wait for WASM bundle to be ready
     */
    public async waitUntilReady(): Promise<void> {
        return this._wasmBundle.waitUntilReady();
    }
}

// Export the main bundle class as default
export default {{ .ModuleName | title }}Bundle;
