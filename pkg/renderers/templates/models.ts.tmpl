{{if .ExternalImports}}{{range .ExternalImports}}import { {{range $i, $type := .Types}}{{if $i}}, {{end}}{{$type}}{{end}} } from "{{.ImportPath}}";
{{end}}

{{end}}import { {{range $i, $msg := .Messages}}{{if $i}}, {{end}}{{$msg.TSName}} as {{$msg.TSName}}Interface{{end}}{{if and .HasMessages .HasEnums}}, {{end}}{{range $i, $enum := .Enums}}{{if $i}}, {{end}}{{$enum.TSName}}{{end}} } from "./interfaces";
import { {{.DeserializerName}} } from "./deserializer";

{{range .Messages}}
{{if .Comment}}/**
 * {{.Comment}}
 */{{end}}
export class {{.TSName}} implements {{.TSName}}Interface {
  /**
   * Fully qualified message type for schema resolution
   */
  static readonly MESSAGE_TYPE = "{{.FullyQualifiedName}}";

{{range .Fields}}  {{if .Comment}}/** {{.Comment}} */
  {{end}}{{if .IsOneof}}{{.TSName}}?: {{.TSType}};{{else if eq .DefaultValue "undefined"}}{{.TSName}}?: {{.TSType}};{{else}}{{.TSName}}: {{.TSType}} = {{.DefaultValue}};{{end}}
{{end}}
  /**
   * Create and deserialize an instance from raw data
   * @param data Raw data to deserialize
   * @returns Deserialized {{.TSName}} instance or null if creation failed
   */
  static from(data: any) {
    return {{$.DeserializerName}}.from<{{.TSName}}>({{.TSName}}.MESSAGE_TYPE, data);
  }
}

{{end}}
