{{/* Schema template for TypeScript schema generation */}}
// Generated TypeScript schemas from proto file
// DO NOT EDIT - This file is auto-generated

import { FieldType, FieldSchema, MessageSchema, BaseSchemaRegistry } from "@protoc-gen-go-wasmjs/runtime";

{{range .Messages}}
/**
 * Schema for {{.TSName}} message
 */
export const {{.TSName}}Schema: MessageSchema = {
  name: "{{.TSName}}",
  fields: [
{{range .Fields}}    {
      name: "{{.TSName}}",
      type: {{if .MessageType}}FieldType.MESSAGE{{else if .IsRepeated}}FieldType.REPEATED{{else if eq .TSType "string"}}FieldType.STRING{{else if eq .TSType "number"}}FieldType.NUMBER{{else if eq .TSType "boolean"}}FieldType.BOOLEAN{{else}}FieldType.STRING{{end}},
      id: {{if .ProtoFieldID}}{{.ProtoFieldID}}{{else}}-1{{end}},
{{if .MessageType}}      messageType: "{{.MessageType}}",
{{end}}{{if .IsRepeated}}      repeated: true,
{{end}}{{if .OneofGroup}}      oneofGroup: "{{.OneofGroup}}",
{{end}}{{if .IsOptional}}      optional: true,
{{end}}    },
{{end}}  ],
{{if .OneofGroups}}  oneofGroups: [{{range $i, $group := .OneofGroups}}{{if $i}}, {{end}}"{{$group}}"{{end}}],
{{end}}};

{{end}}

/**
 * Package-scoped schema registry for {{.PackageName}}
 */
export const {{.SchemaRegistryName}}: Record<string, MessageSchema> = {
{{range .Messages}}  "{{.PackageName}}.{{.TSName}}": {{.TSName}}Schema,
{{end}}};

/**
 * Schema registry instance for {{.PackageName}} package with utility methods
 * Extends BaseSchemaRegistry with package-specific schema data
 */
// Schema utility functions (now inherited from BaseSchemaRegistry in runtime package)
// Creating instance with package-specific schema registry
const registryInstance = new BaseSchemaRegistry({{.SchemaRegistryName}});

export const getSchema = registryInstance.getSchema.bind(registryInstance);
export const getFieldSchema = registryInstance.getFieldSchema.bind(registryInstance);
export const getFieldSchemaById = registryInstance.getFieldSchemaById.bind(registryInstance);
export const isOneofField = registryInstance.isOneofField.bind(registryInstance);
export const getOneofFields = registryInstance.getOneofFields.bind(registryInstance);