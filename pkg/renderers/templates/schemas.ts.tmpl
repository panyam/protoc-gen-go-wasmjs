{{/* Schema template for TypeScript schema generation */}}
// Generated TypeScript schemas from proto file
// DO NOT EDIT - This file is auto-generated

import { FieldType, FieldSchema, MessageSchema } from "./deserializer_schemas";

{{range .Messages}}
/**
 * Schema for {{.TSName}} message
 */
export const {{.TSName}}Schema: MessageSchema = {
  name: "{{.TSName}}",
  fields: [
{{range .Fields}}    {
      name: "{{.TSName}}",
      type: {{if .MessageType}}FieldType.MESSAGE{{else if .IsRepeated}}FieldType.REPEATED{{else if eq .TSType "string"}}FieldType.STRING{{else if eq .TSType "number"}}FieldType.NUMBER{{else if eq .TSType "boolean"}}FieldType.BOOLEAN{{else}}FieldType.STRING{{end}},
      id: {{if .ProtoFieldID}}{{.ProtoFieldID}}{{else}}-1{{end}},
{{if .MessageType}}      messageType: "{{.MessageType}}",
{{end}}{{if .IsRepeated}}      repeated: true,
{{end}}{{if .OneofGroup}}      oneofGroup: "{{.OneofGroup}}",
{{end}}{{if .IsOptional}}      optional: true,
{{end}}    },
{{end}}  ],
{{if .OneofGroups}}  oneofGroups: [{{range $i, $group := .OneofGroups}}{{if $i}}, {{end}}"{{$group}}"{{end}}],
{{end}}};

{{end}}

/**
 * Package-scoped schema registry for {{.PackageName}}
 */
export const {{.SchemaRegistryName}}: Record<string, MessageSchema> = {
{{range .Messages}}  "{{.PackageName}}.{{.TSName}}": {{.TSName}}Schema,
{{end}}};

/**
 * Get schema for a message type from {{.PackageName}} package
 */
export function getSchema(messageType: string): MessageSchema | undefined {
  return {{.SchemaRegistryName}}[messageType];
}

/**
 * Get field schema by name from {{.PackageName}} package
 */
export function getFieldSchema(messageType: string, fieldName: string): FieldSchema | undefined {
  const schema = getSchema(messageType);
  return schema?.fields.find(field => field.name === fieldName);
}

/**
 * Get field schema by proto field ID from {{.PackageName}} package
 */
export function getFieldSchemaById(messageType: string, fieldId: number): FieldSchema | undefined {
  const schema = getSchema(messageType);
  return schema?.fields.find(field => field.id === fieldId);
}

/**
 * Check if field is part of a oneof group in {{.PackageName}} package
 */
export function isOneofField(messageType: string, fieldName: string): boolean {
  const fieldSchema = getFieldSchema(messageType, fieldName);
  return fieldSchema?.oneofGroup !== undefined;
}

/**
 * Get all fields in a oneof group from {{.PackageName}} package
 */
export function getOneofFields(messageType: string, oneofGroup: string): FieldSchema[] {
  const schema = getSchema(messageType);
  return schema?.fields.filter(field => field.oneofGroup === oneofGroup) || [];
}