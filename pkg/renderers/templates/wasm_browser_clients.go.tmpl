//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: {{ .SourcePath }}

package {{ .ModuleName }}

import (
	"context"
  grpc "google.golang.org/grpc"

{{- range .Imports }}
	{{ .Alias }} {{ .Path | printf "%q" }}
{{- end }}
)

// =============================================================================
// Browser Service Client Implementations
// =============================================================================

{{- range $service := .BrowserClients }}

// {{ $service.Name }}Client is a client for the browser-provided {{ $service.Name }} service
type {{ $service.Name }}Client struct {
	channel *wasm.BrowserServiceChannel
}

// New{{ $service.Name }}Client creates a new client for the browser-provided {{ $service.Name }} service
func New{{ $service.Name }}Client() *{{ $service.Name }}Client {
	return &{{ $service.Name }}Client{
		channel: wasm.GetBrowserChannel(),
	}
}

{{- range .Methods }}

// {{ .Name }} calls the browser-provided {{ .Name }} method
func (c *{{ $service.Name }}Client) {{ .Name }}(ctx context.Context, req *{{ .RequestType }}, opts ...grpc.CallOption) (*{{ .ResponseType }}, error) {
{{- if .IsAsync }}
	// This is an async browser method (returns a Promise in JavaScript)
	return wasm.CallBrowserServiceAsync[*{{ .RequestType }}, *{{ .ResponseType }}](
		c.channel, ctx, "{{ $service.Name }}", "{{ .JSName }}", req,
	)
{{- else }}
	// This is a synchronous browser method
	return wasm.CallBrowserService[*{{ .RequestType }}, *{{ .ResponseType }}](
		c.channel, ctx, "{{ $service.Name }}", "{{ .JSName }}", req,
	)
{{- end }}
}
{{- end }}
{{- end }}
