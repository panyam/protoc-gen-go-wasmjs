//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: {{ .SourcePath }}

package {{ .ModuleName }}

import (
{{- if .HasServices }}
	"context"
	"encoding/json"
	"fmt"
	"syscall/js"

	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
{{- end }}
{{- range .Imports }}
	{{ .Alias }} {{ .Path | printf "%q" }}
{{- end }}
)

{{- if .Services }}

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse creates a JavaScript response object
func createJSResponse(success bool, message string, data any) any {
	return wasm.CreateJSResponse(success, message, data)
}

// =============================================================================
// Server Stream Wrappers
// =============================================================================

{{- range .Services }}
{{- range .Methods }}
{{- if .IsServerStreaming }}

// serverStreamWrapper{{ .Name }} implements the server stream interface for {{ .Name }}
type serverStreamWrapper{{ .Name }} struct {
	ctx context.Context
	callback js.Value
}

func (s *serverStreamWrapper{{ .Name }}) Send(resp *{{ .ResponseType }}) error {
	// Marshal response
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false,
		EmitUnpopulated: false,
		UseEnumNumbers:  false,
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		s.callback.Invoke(js.Null(), fmt.Sprintf("Failed to marshal response: %v", err), true)
		return err
	}

	// Call callback with response, no error, not done - returns boolean to continue
	shouldContinue := s.callback.Invoke(string(responseJSON), js.Null(), false)

	// Check if JS wants to stop the stream
	if !shouldContinue.Bool() {
		return fmt.Errorf("stream cancelled by client")
	}

	return nil
}

func (s *serverStreamWrapper{{ .Name }}) Context() context.Context {
	return s.ctx
}

// Implement other required methods for the stream interface
func (s *serverStreamWrapper{{ .Name }}) SetHeader(metadata.MD) error { return nil }
func (s *serverStreamWrapper{{ .Name }}) SendHeader(metadata.MD) error { return nil }
func (s *serverStreamWrapper{{ .Name }}) SetTrailer(metadata.MD) {}
func (s *serverStreamWrapper{{ .Name }}) SendMsg(m interface{}) error {
	if msg, ok := m.(*{{ .ResponseType }}); ok {
		return s.Send(msg)
	}
	return fmt.Errorf("unexpected message type")
}
func (s *serverStreamWrapper{{ .Name }}) RecvMsg(m interface{}) error { return nil }

{{- end }}
{{- end }}
{{- end }}
{{- end }}
