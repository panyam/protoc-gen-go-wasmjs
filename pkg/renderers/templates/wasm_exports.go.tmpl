//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: {{ .SourcePath }}

package {{ .ModuleName }}

import (
{{- if or .HasServices .HasBrowserClients }}
	"context"
{{- end }}
{{- if .HasServices }}
	"encoding/json"
{{- end }}
	"fmt"
	"syscall/js"
{{- if .HasServices }}
	"time"

	"google.golang.org/protobuf/encoding/protojson"
{{- end }}
{{- range .Imports }}
	{{ .Alias }} {{ .Path | printf "%q" }}
{{- end }}
)

// {{ .PackageName | replaceAll "." "_" | title }}ServicesExports provides WASM exports for dependency injection
type {{ .PackageName | replaceAll "." "_" | title }}ServicesExports struct {
{{- range .Services }}
	{{ .Name }} {{ .GoType }}
{{- end }}
{{- if .HasBrowserClients }}

	// Browser-provided services (clients)
{{- range .BrowserClients }}
	{{ .Name }} *{{ .Name }}Client
{{- end }}
{{- end }}
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *{{ .PackageName | replaceAll "." "_" | title }}ServicesExports) RegisterAPI() {
	fmt.Println("{{ .ModuleName }} WASM module loading...")
{{- if .HasBrowserClients }}

	// Initialize browser channel for browser-provided services
	_ = wasm.GetBrowserChannel()
{{- end }}

{{- if eq .APIStructure "namespaced" }}
	// Create namespaced API structure
	{{ .JSNamespace }} := map[string]interface{}{
	{{- range .Services }}
		"{{ .JSName }}": map[string]interface{}{
		{{- range .Methods }}
			{{- if .ShouldGenerate }}
			"{{ .JSName }}": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.{{ .GoFuncName }}(this, args)
			}),
			{{- end }}
		{{- end }}
		},
	{{- end }}
	}
	js.Global().Set("{{ .JSNamespace }}", js.ValueOf({{ .JSNamespace }}))
{{- else if eq .APIStructure "flat" }}
	// Create flat API structure
	{{- range .Services }}
		{{- range .Methods }}
			{{- if .ShouldGenerate }}
	js.Global().Set("{{ $.JSNamespace }}{{ .Name }}", js.FuncOf(func(this js.Value, args []js.Value) any {
		return exports.{{ .GoFuncName }}(this, args)
	}))
			{{- end }}
		{{- end }}
	{{- end }}
{{- else if eq .APIStructure "service_based" }}
	// Create service-based API structure
	services := map[string]interface{}{
	{{- range .Services }}
		"{{ .JSName }}": map[string]interface{}{
		{{- range .Methods }}
			{{- if .ShouldGenerate }}
			"{{ .JSName }}": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.{{ .GoFuncName }}(this, args)
			}),
			{{- end }}
		{{- end }}
		},
	{{- end }}
	}
	js.Global().Set("services", js.ValueOf(services))
{{- end }}

	fmt.Println("{{ .ModuleName }} WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

{{- range .Services }}
	{{- $serviceName := .Name }}
	{{- range .Methods }}
		{{- if .ShouldGenerate }}

// {{ .GoFuncName }} handles the {{ .Name }} method for {{ $serviceName }}
func (exports *{{ $.PackageName | replaceAll "." "_" | title }}ServicesExports) {{ .GoFuncName }}(this js.Value, args []js.Value) any {
	if exports.{{ $serviceName }} == nil {
		return createJSResponse(false, "{{ $serviceName }} not initialized", nil)
	}

	{{- if .IsServerStreaming }}
	// Server streaming method: expect request JSON and callback function
	if len(args) < 2 {
		return createJSResponse(false, "Request JSON and callback function required for streaming method", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	callback := args[1]
	if callback.Type() != js.TypeFunction {
		return createJSResponse(false, "Second argument must be a callback function", nil)
	}

	// Parse request
	req := &{{ .RequestType }}{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true,
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Start streaming in goroutine to avoid blocking
	go func() {
		ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
		defer cancel()

		// Create a stream wrapper for server-side streaming
		streamWrapper := &serverStreamWrapper{{ .Name }}{
			ctx: ctx,
			callback: callback,
		}

		// Call the server streaming method
		err := exports.{{ $serviceName }}.{{ .Name }}(req, streamWrapper)
		if err != nil {
			// Call callback with error and done=true
			callback.Invoke(js.Null(), err.Error(), true)
			return
		}

		// Signal completion
		callback.Invoke(js.Null(), js.Null(), true)
	}()

	// Return immediately for streaming methods
	return createJSResponse(true, "Server streaming started", nil)
	{{- else if .IsAsync }}
	// Async method: expect request JSON and callback function
	if len(args) < 2 {
		return createJSResponse(false, "Request JSON and callback function required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	callback := args[1]
	if callback.Type() != js.TypeFunction {
		return createJSResponse(false, "Second argument must be a callback function", nil)
	}

	// Parse request
	req := &{{ .RequestType }}{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true,
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Call service method in goroutine to avoid blocking
	go func() {
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()

		// Call service method
		resp, err := exports.{{ $serviceName }}.{{ .Name }}(ctx, req)

		if err != nil {
			// Call callback with error
			callback.Invoke(js.Null(), err.Error())
			return
		}

		// Marshal response
		marshalOpts := protojson.MarshalOptions{
			UseProtoNames:   false,
			EmitUnpopulated: true,  // Emit zero values to avoid undefined in JavaScript
			UseEnumNumbers:  false,
		}
		responseJSON, err := marshalOpts.Marshal(resp)
		if err != nil {
			callback.Invoke(js.Null(), fmt.Sprintf("Failed to marshal response: %v", err))
			return
		}

		// Convert JSON to JavaScript object and call callback
		var jsObject interface{}
            if err := json.Unmarshal(responseJSON, &jsObject); err != nil {
                callback.Invoke(js.Null(), fmt.Sprintf("Failed to convert response to JS object: %v", err))
                return
            }
            callback.Invoke(js.ValueOf(jsObject), js.Null())
	}()

	// Return immediately for async methods
	return createJSResponse(true, "Async operation started", nil)
	{{- else }}
	// Synchronous method
	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &{{ .RequestType }}{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.{{ $serviceName }}.{{ .Name }}(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: true,  // Emit zero values to avoid undefined in JavaScript
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
	{{- end }}
}
		{{- end }}
	{{- end }}
{{- end }}
