{"version":3,"sources":["../../src/browser/service-manager.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["// Copyright 2025 Sri Panyam\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Browser Service Manager\n * Handles FIFO processing of browser service calls from WASM\n * This is a shared component used by all WASM clients that interact with browser services\n */\nexport class BrowserServiceManager {\n    private processing = false;\n    private serviceImplementations = new Map<string, any>();\n    private wasmModule: any;\n\n    constructor() {\n        // WASM will set up the global functions __wasmGetNextBrowserCall and __wasmDeliverBrowserResponse\n        // We'll just use them when they're available\n    }\n\n    /**\n     * Register a browser service implementation\n     */\n    registerService(name: string, implementation: any): void {\n        this.serviceImplementations.set(name, implementation);\n    }\n\n    /**\n     * Set the WASM module reference\n     */\n    setWasmModule(wasmModule: any): void {\n        this.wasmModule = wasmModule;\n    }\n\n    /**\n     * Start processing browser service calls\n     */\n    async startProcessing(): Promise<void> {\n        if (this.processing) return;\n        this.processing = true;\n\n        // Process calls in a loop\n        while (this.processing) {\n            const call = this.getNextBrowserCall();\n            if (!call) {\n                // No pending calls, wait a bit\n                await new Promise(resolve => setTimeout(resolve, 10));\n                continue;\n            }\n\n            // Process each call asynchronously without blocking the loop\n            this.processCall(call);\n        }\n    }\n\n    /**\n     * Process a single browser service call asynchronously\n     */\n    private async processCall(call: any): Promise<void> {\n        try {\n            // Get the service implementation\n            const service = this.serviceImplementations.get(call.service);\n            if (!service) {\n                throw new Error(`No implementation registered for service: ${call.service}`);\n            }\n\n            // Get the method\n            const methodName = call.method.charAt(0).toLowerCase() + call.method.slice(1);\n            const method = service[methodName];\n            if (!method) {\n                throw new Error(`Method ${methodName} not found on service ${call.service}`);\n            }\n\n            // Parse request\n            const request = JSON.parse(call.request);\n\n            // Call the method (auto-await if async)\n            const response = await Promise.resolve(method.call(service, request));\n\n            // Deliver response\n            this.deliverBrowserResponse(call.id, JSON.stringify(response), null);\n        } catch (error: any) {\n            // Deliver error\n            this.deliverBrowserResponse(call.id, null, error.message || String(error));\n        }\n    }\n\n    /**\n     * Stop processing browser service calls\n     */\n    stopProcessing(): void {\n        this.processing = false;\n    }\n\n    /**\n     * Get the next browser call from WASM\n     */\n    private getNextBrowserCall(): any {\n        // The __wasmGetNextBrowserCall function should be provided by WASM\n        if (typeof (window as any).__wasmGetNextBrowserCall === 'function') {\n            return (window as any).__wasmGetNextBrowserCall();\n        }\n        return null;\n    }\n\n    /**\n     * Deliver a response back to WASM (called internally)\n     */\n    private deliverBrowserResponse(callId: string, response: string | null, error: string | null): boolean {\n        if (!(window as any).__wasmDeliverBrowserResponse) {\n            return false;\n        }\n        return (window as any).__wasmDeliverBrowserResponse(callId, response, error);\n    }\n}\n"]}