{"version":3,"sources":["../../src/types/patches.ts"],"names":["PatchOperation","PatchSource"],"mappings":";AAiBO,IAAK,cAAA,qBAAAA,eAAAA,KAAL;AACL,EAAAA,gBAAA,KAAA,CAAA,GAAM,KAAA;AACN,EAAAA,gBAAA,aAAA,CAAA,GAAc,aAAA;AACd,EAAAA,gBAAA,aAAA,CAAA,GAAc,aAAA;AACd,EAAAA,gBAAA,WAAA,CAAA,GAAY,WAAA;AACZ,EAAAA,gBAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,gBAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,gBAAA,YAAA,CAAA,GAAa,YAAA;AACb,EAAAA,gBAAA,WAAA,CAAA,GAAY,WAAA;AARF,EAAA,OAAAA,eAAAA;AAAA,CAAA,EAAA,cAAA,IAAA,EAAA;AAwEL,IAAK,WAAA,qBAAAC,YAAAA,KAAL;AACL,EAAAA,aAAA,OAAA,CAAA,GAAQ,OAAA;AACR,EAAAA,aAAA,QAAA,CAAA,GAAS,QAAA;AACT,EAAAA,aAAA,QAAA,CAAA,GAAS,QAAA;AACT,EAAAA,aAAA,SAAA,CAAA,GAAU,SAAA;AAJA,EAAA,OAAAA,YAAAA;AAAA,CAAA,EAAA,WAAA,IAAA,EAAA","file":"index.mjs","sourcesContent":["// Copyright 2025 Sri Panyam\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Patch operations for modifying protobuf message fields\n */\nexport enum PatchOperation {\n  SET = 'SET',\n  INSERT_LIST = 'INSERT_LIST',\n  REMOVE_LIST = 'REMOVE_LIST',\n  MOVE_LIST = 'MOVE_LIST',\n  INSERT_MAP = 'INSERT_MAP',\n  REMOVE_MAP = 'REMOVE_MAP',\n  CLEAR_LIST = 'CLEAR_LIST',\n  CLEAR_MAP = 'CLEAR_MAP',\n}\n\n/**\n * A single patch operation on a protobuf message field\n */\nexport interface MessagePatch {\n  /** The type of operation to perform */\n  operation: PatchOperation;\n  \n  /** Path to the field being modified (e.g., \"players[2].name\", \"places['tile_123'].latitude\") */\n  fieldPath: string;\n  \n  /** The new value to set (for SET, INSERT_LIST, INSERT_MAP operations) */\n  value?: any;\n  \n  /** Index for list operations (INSERT_LIST, REMOVE_LIST, MOVE_LIST) */\n  index?: number;\n  \n  /** Map key for map operations (INSERT_MAP, REMOVE_MAP) */\n  key?: string;\n  \n  /** Source index for MOVE_LIST operations */\n  oldIndex?: number;\n  \n  /** Monotonically increasing change number for ordering */\n  changeNumber: number;\n  \n  /** Timestamp when the change was created (microseconds since epoch) */\n  timestamp: number;\n  \n  /** Optional user ID who made the change (for conflict resolution) */\n  userId?: string;\n  \n  /** Optional transaction ID to group related patches */\n  transactionId?: string;\n}\n\n/**\n * A batch of patches applied to a single entity\n */\nexport interface PatchBatch {\n  /** The fully qualified protobuf message type (e.g., \"example.Game\") */\n  messageType: string;\n  \n  /** The unique identifier of the entity being modified */\n  entityId: string;\n  \n  /** List of patches to apply in order */\n  patches: MessagePatch[];\n  \n  /** The highest change number in this batch */\n  changeNumber: number;\n  \n  /** Source of the changes */\n  source: PatchSource;\n  \n  /** Optional metadata about the batch */\n  metadata?: Record<string, string>;\n}\n\n/**\n * Source of patch changes\n */\nexport enum PatchSource {\n  LOCAL = 'LOCAL',\n  REMOTE = 'REMOTE', \n  SERVER = 'SERVER',\n  STORAGE = 'STORAGE',\n}\n\n/**\n * Response message for methods that return patches\n */\nexport interface PatchResponse {\n  /** The patches to apply */\n  patchBatches: PatchBatch[];\n  \n  /** Success status */\n  success: boolean;\n  \n  /** Error message if success is false */\n  errorMessage?: string;\n  \n  /** The new change number after applying these patches */\n  newChangeNumber: number;\n}\n\n/**\n * Transport interface for receiving patch updates\n */\nexport interface ChangeTransport {\n  /** Register callback for incoming changes */\n  onChanges(callback: (batches: PatchBatch[]) => void): void;\n  \n  /** Disconnect from the transport */\n  disconnect(): void;\n}\n"]}