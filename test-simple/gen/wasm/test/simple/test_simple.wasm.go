//go:build js && wasm
// +build js,wasm

// Code generated by protoc-gen-go-wasmjs. DO NOT EDIT.
// source: simple.proto

package test_services

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"syscall/js"
	"time"

	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
	testsimple "github.com/test/simple"
	wasm "github.com/panyam/protoc-gen-go-wasmjs/pkg/wasm"
)

// Test_simpleServicesExports provides WASM exports for dependency injection
type Test_simpleServicesExports struct {
	TestService testsimple.TestServiceServer
}

// RegisterAPI registers the services with the JavaScript global namespace
func (exports *Test_simpleServicesExports) RegisterAPI() {
	fmt.Println("test_services WASM module loading...")
	// Create namespaced API structure
	testModule := map[string]interface{}{
		"testService": map[string]interface{}{
			"hello": js.FuncOf(func(this js.Value, args []js.Value) any {
				return exports.testServiceHello(this, args)
			}),
		},
	}
	js.Global().Set("testModule", js.ValueOf(testModule))

	fmt.Println("test_services WASM module loaded successfully")
}

// =============================================================================
// WASM API Functions - Generated Method Wrappers
// =============================================================================

// testServiceHello handles the Hello method for TestService
func (exports *Test_simpleServicesExports) testServiceHello(this js.Value, args []js.Value) any {
	if exports.TestService == nil {
		return createJSResponse(false, "TestService not initialized", nil)
	}
	// Synchronous method
	if len(args) < 1 {
		return createJSResponse(false, "Request JSON required", nil)
	}

	requestJSON := args[0].String()
	if requestJSON == "" {
		return createJSResponse(false, "Request JSON is empty", nil)
	}

	// Parse request
	req := &testsimple.HelloRequest{}
	opts := protojson.UnmarshalOptions{
		DiscardUnknown: true,
		AllowPartial:   true, // Allow partial messages for better compatibility
	}
	if err := opts.Unmarshal([]byte(requestJSON), req); err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to parse request: %v", err), nil)
	}

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Call service method
	resp, err := exports.TestService.Hello(ctx, req)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Service call failed: %v", err), nil)
	}

	// Marshal response with options for better TypeScript compatibility
	marshalOpts := protojson.MarshalOptions{
		UseProtoNames:   false, // Use JSON names (camelCase) instead of proto names
		EmitUnpopulated: true,  // Emit zero values to avoid undefined in JavaScript
		UseEnumNumbers:  false, // Use enum string values
	}
	responseJSON, err := marshalOpts.Marshal(resp)
	if err != nil {
		return createJSResponse(false, fmt.Sprintf("Failed to marshal response: %v", err), nil)
	}

	return createJSResponse(true, "Success", json.RawMessage(responseJSON))
}

// =============================================================================
// Server Stream Wrappers
// =============================================================================

// =============================================================================
// Helper Functions
// =============================================================================

// createJSResponse is a wrapper for the library function
func createJSResponse(success bool, message string, data any) any {
	// Inline implementation when no browser services (no wasm import)
	response := map[string]any{
		"success": success,
		"message": message,
		"data":    data,
	}

	responseBytes, err := json.Marshal(response)
	if err != nil {
		fmt.Printf("Failed to marshal JSON response: %v\n", err)
		errorResponse := map[string]any{
			"success": false,
			"message": fmt.Sprintf("JSON marshal error: %v", err),
			"data":    nil,
		}
		errorBytes, _ := json.Marshal(errorResponse)
		return js.Global().Get("JSON").Call("parse", string(errorBytes))
	}

	return js.Global().Get("JSON").Call("parse", string(responseBytes))
}
